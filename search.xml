<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>00. Difference between nil in Objective-C and nil in Swift</title>
      <link href="/2023/08/15/iOS/04.%20Others/00.%20Difference%20Of%20nil%20in%20OC%20and%20nil%20in%20Swift/"/>
      <url>/2023/08/15/iOS/04.%20Others/00.%20Difference%20Of%20nil%20in%20OC%20and%20nil%20in%20Swift/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><h4 id="1-nil-in-Objective-C"><a href="#1-nil-in-Objective-C" class="headerlink" title="1. nil in Objective-C"></a><font size=3 color=#4169E1>1. nil in Objective-C</font></h4><p> <strong>1.1 The Concept</strong><br>nil (or Nil) in Objective-C is a pointer to an empty object. In Objective-C, an object can be an instance or a class. When an object is created, it is allocated to memory and initialized to zero. If it is not initialized to another value, the object pointer has a value of nil.</p><p>In Objective-C, sending a message to a nil object is valid because the message does not result in any operation. This is because Objective-C messaging is implemented through method calls that send messages to objects, not through the methods of the objects themselves. So when the object is nil, calling the object’s methods has no effect because it is essentially a null pointer.</p><p>Here’s an example showing the use of nil in Objective-C:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString *str = nil;</span><br><span class="line">NSLog(@&quot;The value of str is: %@&quot;, str);</span><br></pre></td></tr></table></figure><p>Output results:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The value of str is: (null)</span><br></pre></td></tr></table></figure><p> <strong>1.2 Implementation Principle</strong><br>In terms of the underlying implementation, nil in Objective-C is actually a predefined macro for a null object pointer. In Objective-C, all objects are accessed via pointers, and a nil is actually a pointer with a value of zero. Thus, when an object is assigned a value of nil, it is actually given a pointer with a value of 0, indicating that the object does not exist.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define nil __DARWIN_NULL</span><br></pre></td></tr></table></figure><p>‘__DARWIN_NULL’ is a null pointer constant pointing to a null address, defined in &lt;stddef.h&gt; with the following code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define __DARWIN_NULL ((void *)0)</span><br></pre></td></tr></table></figure><p>Thus, in Objective-C, when we use nil, we are actually using a null pointer constant to a null address for a null object pointer.</p><h4 id="2-nil-in-Swift"><a href="#2-nil-in-Swift" class="headerlink" title="2. nil in Swift"></a><font size=3 color=#4169E1>2. nil in Swift</font></h4><p><strong>2.1 The Concept</strong><br>In Swift, nil is not a pointer to an empty object. It represents a special type that lacks a value, which is not limited to objects. In Swift, you can use nil to represent any type of value, including basic data types (such as Int, Double, etc.) as well as object types.</p><p>nil in Swift is used for optional types. If a variable or constant is declared as an optional type, it can either contain a value or be nil. if an attempt is made to forcibly unwrap (i.e., get the actual value of) a variable or constant of an optional type, and the variable or constant currently has the value of nil, the program will crash.</p><p>Here’s an example showing the use of nil in Swift:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str: <span class="type">String</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The value of str is: <span class="subst">\(str)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>Output results:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">The</span> value of str <span class="keyword">is</span>: <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>The above code will report an error if it is changed to the following:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str: <span class="type">String</span> <span class="operator">=</span> <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>Or</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>The error messages are as follows:   </p><img src="/assets/iOS/Others/001.png" class="">    <p>Or   </p><img src="/assets/iOS/Others/002.png" class=""><p>That’s because in Swift, the types of variables and constants must be explicitly specified at declaration time. When we declare a variable or constant and initialize it to nil, the Swift compiler can’t determine the type of the variable or constant because nil can represent a missing value of many types. Therefore, we need to tell the compiler the type of the variable or constant by way of a type annotation or type inference.</p><p>‘var str: String &#x3D; nil ‘ declares a variable str of type String and initializes it to nil, but the Swift compiler is not able to determine the type of the variable because nil can represent the missing value of multiple types. As a result, the compiler reports an error, suggesting that we need to provide a Contextual Type or an optional type for it.</p><p><strong>2.2 Implementation Principle</strong>   </p><p>In Swift, all types can use optional types to represent the case of missing values. An optional type is actually an enumerated type that has two possible values: a value and no value. When an optional type has a value of nil, it is actually a special enum member that indicates that the value is missing.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Optional</span>&lt;<span class="title class_">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">case</span> none</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">some</span>(<span class="type">T</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str: <span class="type">String</span>? <span class="operator">=</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">str <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> value <span class="operator">=</span> str &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The value of str is: <span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The value of str is nil&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output results</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">The</span> value of str <span class="keyword">is</span> <span class="literal">nil</span></span><br></pre></td></tr></table></figure><h4 id="3-Conclusion"><a href="#3-Conclusion" class="headerlink" title="3. Conclusion"></a><font size=3 color=#4169E1>3. Conclusion</font></h4><p>In Objective-C, nil represents a pointer to a null object, which is used to indicate that the object does not exist. In Swift, nil represents a missing value and can be used to represent any type of value. In terms of the underlying implementation, nil in Objective-C is a predefined macro that represents a pointer to a null object, while nil in Swift is a special type that represents the case of an optional type (enumerated type) that is missing a value. In practice, developers need to choose the appropriate language and data type to indicate the presence or absence of a value according to different situations to ensure the correctness and stability of the program.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> 04. Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nil </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Template</title>
      <link href="/2023/08/15/Template/"/>
      <url>/2023/08/15/Template/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p>This is a template for other documents.</p><h4 id="1-“Unrecognized-selector-sent-to-instance”"><a href="#1-“Unrecognized-selector-sent-to-instance”" class="headerlink" title="1. “Unrecognized selector sent to instance”"></a><font size=3 color=#4169E1>1. “Unrecognized selector sent to instance”</font></h4><p>Unrecognized selector sent to instance</p><h4 id="2-“EXC-BAD-ACCESS”"><a href="#2-“EXC-BAD-ACCESS”" class="headerlink" title="2. “EXC_BAD_ACCESS”"></a><font size=3 color=#4169E1>2. “EXC_BAD_ACCESS”</font></h4><p>EXC_BAD_ACCESS…</p><img src="/assets/Demo/wallpaper-2311325.jpg" class=""><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> speed: <span class="type">Float</span> <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> increaseSpeed: (() -&gt; ())<span class="operator">?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/assets/Demo/wallpaper-878514.jpg" class=""><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href="https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/">Why should we avoid using closures in Swift structs?</a><br>[2] <a href="https://cloud.tencent.com/developer/article/1602230">https://cloud.tencent.com/developer/article/1602230</a>   </p>]]></content>
      
      
      <categories>
          
          <category> Template </category>
          
          <category> 00. Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01. Common Crash Scenarios</title>
      <link href="/2023/03/10/iOS/01.%20Memory%20&amp;%20Performance%20&amp;%20Stability/01.%20Common%20Crash%20Scenarios/"/>
      <url>/2023/03/10/iOS/01.%20Memory%20&amp;%20Performance%20&amp;%20Stability/01.%20Common%20Crash%20Scenarios/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p><h4 id="1-“Unrecognized-selector-sent-to-instance”"><a href="#1-“Unrecognized-selector-sent-to-instance”" class="headerlink" title=" 1. “Unrecognized selector sent to instance” "></a><font size=3 color=#4169E1> 1. “Unrecognized selector sent to instance” </font></h4><p><strong>Problem analysis：</strong><br>“unrecognized selector sent to instance” is an Objective-C exception that indicates an attempt to call a method or message that does not exist. This exception usually occurs when: </p><ul><li>When using the performSelector: method, the specified method does not exist; </li><li>When using KVO (key Value observation), the observed property does not exist; </li><li>When using NSNotificationCenter, the monitored event does not exist; </li><li>The specified method is not present when using NSInvocation (message invocation); </li><li>When extending a class with a Category, methods are implemented directly in the implementation file instead of being declared in the header file;<br>And so on.</li></ul><p><strong>Sample code：</strong></p><details><summary>Objective-C</summary><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@interface</span> <span class="type">MyClass</span> : <span class="type">NSObject</span></span><br><span class="line"><span class="operator">-</span> (void)doSomething;</span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@implementation</span> <span class="type">MyClass</span></span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@interface</span> <span class="type">MyOtherClass</span> : <span class="type">NSObject</span></span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@implementation</span> <span class="type">MyOtherClass</span></span><br><span class="line"><span class="operator">-</span> (void)doSomethingElse &#123;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;Doing something else...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line">int main(int argc, const char <span class="operator">*</span> argv[]) &#123;</span><br><span class="line">    <span class="meta">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="operator">*</span>object <span class="operator">=</span> [[<span class="type">MyClass</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">        <span class="comment">// unrecognized selector sent to instance</span></span><br><span class="line">        [object performSelector:<span class="meta">@selector</span>(doSomethingElse)]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><strong>Recommended solution:：</strong>     </p><ul><li>Use the “respondsToSelector” judgment before calling, or use ProtocolKit in Release mode to add a default implementation to the protocol to prevent crashes, and turn off the default implementation in Debug mode.</li><li>Take advantage of the dynamic nature of OC and use several methods of message forwarding to underwrite the process.</li></ul><h4 id="2-“EXC-BAD-ACCESS”"><a href="#2-“EXC-BAD-ACCESS”" class="headerlink" title=" 2. “EXC_BAD_ACCESS” "></a><font size=3 color=#4169E1> 2. “EXC_BAD_ACCESS” </font></h4><p><strong>Problem analysis：</strong><br>There are many reasons for the problem:</p><ul><li>Occurrence of hanging pointers (null pointers, wild pointers)</li><li>Objects are not initialized</li><li>The accessed object is freed</li><li>Access to out-of-bounds collection elements<br>etc.</li></ul><p><strong>Sample code：</strong><br>Omitted.<br><strong>Recommended solution:：</strong>   </p><ol><li>turn on zombie mode in Debug phase and turn off zombie mode in Release.  </li><li>use Xcode’s Address Sanitizer to check address access out of bounds.  </li><li>remember to initialize when creating objects.  </li><li>use the correct modifier for the object’s attributes (should use strong&#x2F;weak, misused assign).   </li><li>call block and other objects before the time to make a judgment.</li></ol><h4 id="3-Caused-by-Collection-Related"><a href="#3-Caused-by-Collection-Related" class="headerlink" title=" 3. Caused by Collection Related "></a><font size=3 color=#4169E1> 3. Caused by Collection Related </font></h4><p><strong>Problem analysis：</strong><br>There are also many scenarios that lead to Crash.   </p><ol><li>Array out-of-bounds, where the access subscript is greater than the number of arrays.   </li><li>Adding empty data to the array.     </li><li>Multi-threaded environment, a thread is reading, a thread is removing.        </li><li>Multi-threaded operation of variable arrays (expansion of arrays, access to zombie objects).</li></ol><p><strong>Sample code：</strong>  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accessing an array out of bounds will cause a crash</span></span><br><span class="line"><span class="keyword">let</span> array <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> item <span class="operator">=</span> array[<span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Forcibly unwrapping an optional type and it&#x27;s value is nil will cause a crash</span></span><br><span class="line"><span class="keyword">var</span> dict: [<span class="type">String</span>: <span class="type">String</span>?] <span class="operator">=</span> [<span class="string">&quot;key1&quot;</span>: <span class="string">&quot;value1&quot;</span>, <span class="string">&quot;key2&quot;</span>: <span class="string">&quot;value2&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> value <span class="operator">=</span> dict[<span class="string">&quot;key1&quot;</span>]<span class="operator">!</span> </span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Forcibly unwrapping an optional type and it&#x27;s value is nil will cause a crash</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">set</span>: <span class="type">Set</span>&lt;<span class="type">String</span>?&gt; <span class="operator">=</span> [<span class="string">&quot;value1&quot;</span>, <span class="string">&quot;value2&quot;</span>, <span class="literal">nil</span>]</span><br><span class="line"><span class="keyword">let</span> value <span class="operator">=</span> <span class="keyword">set</span>.first<span class="operator">!</span>  </span><br></pre></td></tr></table></figure><p><strong>Recommended solution:：</strong>  </p><ol><li>When using dictionaries and sets, check whether the keys and values are nil (use guard, if let, and other syntax to avoid crashes caused by forced unwrapping);</li><li>Use extensions to override original methods and perform checks internally;</li><li>In Objective-C, use Runtime mechanism to replace original methods with custom secure methods;</li><li>When performing multi-threaded operations on arrays, ensure the atomicity of read and write operations, such as locking or other protective measures.</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Use the safe subscript extension provided by Swift to avoid accessing an array out of bounds.</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Collection</span> &#123;</span><br><span class="line">    <span class="keyword">subscript</span>(<span class="params">safe</span> <span class="params">index</span>: <span class="type">Index</span>) -&gt; <span class="type">Element</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> indices.contains(index) <span class="operator">?</span> <span class="keyword">self</span>[index] : <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> item <span class="operator">=</span> array[safe: <span class="number">3</span>] <span class="comment">//It will not cause a crash, and the resulting value will be nil.</span></span><br></pre></td></tr></table></figure><h4 id="4-“Out-of-Memory”"><a href="#4-“Out-of-Memory”" class="headerlink" title=" 4. “Out of Memory” "></a><font size=3 color=#4169E1> 4. “Out of Memory” </font></h4><p><strong>Problem analysis：</strong><br>In iOS applications, if the application allocates too much memory and causes the system to run out of memory, an OOM error will occur. Each application on an iOS device has its own memory limit. When an application needs to allocate more memory, if there is not enough available memory, the system will automatically trigger an OOM error, terminate the application, and release it from memory.</p><p>The causes of OOM errors may include:</p><ol><li>The application tries to allocate a large amount of memory when there is not enough memory available.</li><li>Memory leaks in the application that cause high memory usage.</li><li>The application’s memory usage is not compatible with system resources, resulting in high memory usage, etc.</li></ol><p><strong>Sample code：</strong>  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> &#123;</span><br><span class="line">    array.append(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Recommended solution:：</strong>  </p><p>To avoid OOM errors, the following measures can be taken:</p><ol><li>Use appropriate data structures to avoid unnecessary memory usage.</li><li>Debug memory leaks.</li><li>Release unnecessary memory in a timely manner, such as calling autoreleasepool to release it after using a large memory object.</li><li>Reduce object creation. Object pool and other technologies can be used to reuse existing objects rather than frequently creating and destroying objects.</li><li>For large memory objects, lazy-loading and other technologies can be used to load them only when needed to reduce memory usage.</li></ol><h4 id="5-“Type-Cast-Exception”or-“Type-Mismatch”"><a href="#5-“Type-Cast-Exception”or-“Type-Mismatch”" class="headerlink" title=" 5. “Type Cast Exception”or “Type Mismatch” "></a><font size=3 color=#4169E1> 5. “Type Cast Exception”or “Type Mismatch” </font></h4><p><strong>Problem analysis：</strong><br>Type Cast Exception or Type Mismatch refers to the exception that occurs during type conversion, leading to application crash. In iOS development, common scenarios include:</p><ol><li>Type mismatch occurs when converting an instance of one type to an instance of another type.</li><li>Type mismatch occurs when converting from AnyObject to a specific type.</li><li>Crash occurs when forcing the unwrapping of an optional type to a non-optional type with a nil value.</li></ol><p><strong>Sample code：</strong>  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array: [<span class="keyword">Any</span>] <span class="operator">=</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> array[<span class="number">0</span>] <span class="keyword">as!</span> <span class="type">Int</span></span><br><span class="line"><span class="comment">//Error: Could not cast value of type &#x27;Swift.String&#x27; (0x7ff8553bc178) to &#x27;Swift.Int&#x27; (0x7ff8553be0e0).</span></span><br></pre></td></tr></table></figure><p><strong>Recommended solution:：</strong>  </p><ol><li>Before performing type conversion, check if the object is an instance of the target type using the is keyword.</li><li>Use optional binding to avoid exceptions when typecasting.</li></ol><p>For example, in the above example, the following code can be used for improvement:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array: [<span class="keyword">Any</span>] <span class="operator">=</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> obj <span class="operator">=</span> array[<span class="number">0</span>] <span class="keyword">as?</span> <span class="type">Int</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-Caused-by-Deadlock"><a href="#6-Caused-by-Deadlock" class="headerlink" title=" 6. Caused by Deadlock "></a><font size=3 color=#4169E1> 6. Caused by Deadlock </font></h4><p><strong>Problem analysis：</strong><br>Deadlock refers to a situation where two or more threads are waiting for each other to complete their operations, causing the program to become unresponsive. In iOS, the most common cause of a deadlock is when a synchronous operation is executed on the main thread that waits for another thread to complete, while the other thread is also waiting for the main thread to complete, resulting in a deadlock.</p><p><strong>Sample code：</strong><br>In the following code, when the main thread calls the queue.sync method, it waits for the completion of Block 1. However, Block 1 calls queue.sync again, causing the thread to enter a waiting state. Since Block 2 depends on the thread to release the lock before it can execute, the entire program is in a deadlock state and cannot continue executing.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> queue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;com.example.queue&quot;</span>)</span><br><span class="line">queue.sync &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Block 1&quot;</span>)</span><br><span class="line">    queue.sync &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Block 2&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br></pre></td></tr></table></figure><img src="/assets/iOS/Memory&Performance&Stability/001.png" class=""><p><strong>Recommended solution:：</strong> </p><ol><li>Avoid executing long synchronous operations on the main thread, and instead, perform them on a background thread.</li><li>Avoid using synchronous operations that wait for each other on the same queue and use asynchronous operations instead.</li><li>Avoid using synchronous operations on multiple queues that cause deadlocks. Use asynchronous operations instead or use techniques such as dispatch_group to solve the issue.</li></ol><p>In the above example, you can replace the synchronous operations with asynchronous operations, as shown below:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> queue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;com.example.queue&quot;</span>)</span><br><span class="line">queue.async &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Block 1&quot;</span>)</span><br><span class="line">    queue.async &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Block 2&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-Caused-by-Stack-Overflow"><a href="#7-Caused-by-Stack-Overflow" class="headerlink" title=" 7. Caused by Stack Overflow "></a><font size=3 color=#4169E1> 7. Caused by Stack Overflow </font></h4><p><strong>Problem analysis：</strong><br>Stack Overflow usually occurs in recursive calls. If the recursion does not have a termination condition or the termination condition is incorrect, the recursion depth will continue to increase until the stack space is exhausted, causing a stack overflow. </p><p>In addition, if one method calls another method, a deep call stack can also cause a stack overflow.         </p><p><strong>Sample code：</strong>  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">recursiveFunction</span>() &#123;</span><br><span class="line">    recursiveFunction()</span><br><span class="line">&#125;</span><br><span class="line">recursiveFunction() </span><br></pre></td></tr></table></figure><p><strong>Recommended solution:：</strong>  </p><ol><li>Optimize algorithms: Optimize recursive algorithms to reduce the depth of the call stack. For example, use iterative instead of recursive algorithms.</li><li>Increase stack space: Increase available stack space by changing the thread stack size or using the dispatch_set_concurrency function of GCD.</li><li>Reduce stack space usage: Reduce stack space usage by reducing the local variables allocated during function calls, reducing nested calls, or using tail recursion and other techniques.</li><li>Use tail recursion: Tail recursion refers to the last operation in a recursive function being a recursive call to itself. In Swift, you can use the @_optimize(speed) and @_optimize(safety) attributes to mark functions so that the compiler can optimize tail recursion.</li><li>Avoid infinite recursion: Ensure that the recursive algorithm has the correct termination condition; otherwise, the recursion depth will increase infinitely, eventually leading to a stack overflow.</li><li>Use data structures with smaller stack space: For large-scale recursive algorithms, data structures with smaller stack space, such as linked lists or queues, can be used.</li></ol><h4 id="8-Caused-by-KVO"><a href="#8-Caused-by-KVO" class="headerlink" title=" 8. Caused by KVO "></a><font size=3 color=#4169E1> 8. Caused by KVO </font></h4><p><strong>Problem analysis：</strong><br>KVO (Key-Value Observing) is an observer pattern in the Cocoa framework that allows objects to be notified when the value of another object’s property changes. When using KVO, if observers are not removed in a timely manner or the observer object has already been released, it can cause a crash.<br><strong>Sample code：</strong><br>Omitted.（Objective-C）<br><strong>Recommended solution:：</strong>  </p><ol><li>Remove the observer in a timely manner and ensure the observer object exists.</li><li>Best practices for using KVO:    <ul><li>Use KVO only when necessary to avoid overuse;   </li><li>Use Swift’s Property Observers instead of KVO;  </li><li>Use closures or Notification Center instead of KVO;     </li><li>Use the correct method when removing observers to avoid omissions;  </li><li>Avoid using strings as keyPaths. Instead, use static variables or constants, or use the #keyPath() method introduced in Swift 4 to obtain the keyPath.</li></ul></li></ol><h4 id="9-Caused-by-Multi-threaded"><a href="#9-Caused-by-Multi-threaded" class="headerlink" title=" 9. Caused by Multi-threaded "></a><font size=3 color=#4169E1> 9. Caused by Multi-threaded </font></h4><p><strong>Problem analysis：</strong><br>Crashes caused by multi-threading are a common issue in iOS, which may occur in different scenarios. Here are some possible scenarios, sample code, and recommended solutions that may cause multi-threading crashes:</p><ol><li>Multiple threads accessing the same shared data structure or variable without synchronization or locking.</li><li>Using unsafe data structures or APIs in a multi-threaded environment, such as using non-thread-safe mutable collection class Array.</li><li>Calling a long-running operation (such as network requests or I&#x2F;O operations) in a thread, causing the UI thread to be blocked.</li><li>Updating the UI in a sub-thread.</li></ol><p>In general, the crash caused by multi-threading will receive a SIGSEGV signal, indicating that an attempt was made to access memory that was not allocated to oneself or to write data to a memory address without write permission.</p><p><strong>Sample code：</strong><br>The following is a simple sample code that demonstrates the scenarios and issues caused by multi-threading crashes:  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line"><span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">100</span> &#123;</span><br><span class="line">        array.append(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">100</span><span class="operator">..&lt;</span><span class="number">200</span> &#123;</span><br><span class="line">        array.append(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After running it, the crash occurs:</p><img src="/assets/iOS/Memory&Performance&Stability/002.jpeg" class=""><p><strong>Recommended solution:：</strong>  </p><p>Here are three possible recommended solutions that can help you avoid multi-threading crashes:</p><ol><li><p>Use thread-safe data structures or APIs, such as using NSLock or dispatch_semaphore_t to synchronize.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lock <span class="operator">=</span> <span class="type">NSLock</span>()</span><br><span class="line"><span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">    lock.lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">100</span> &#123;</span><br><span class="line">        array.append(i)</span><br><span class="line">    &#125;</span><br><span class="line">    lock.unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">    lock.lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">100</span><span class="operator">..&lt;</span><span class="number">200</span> &#123;</span><br><span class="line">        array.append(i)</span><br><span class="line">    &#125;</span><br><span class="line">    lock.unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Use GCD for inter-thread communication and avoid long-running operations on the main thread.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DispatchQueue</span>.global().async &#123;</span><br><span class="line">    <span class="keyword">let</span> data <span class="operator">=</span> getData() <span class="comment">// long-running operation</span></span><br><span class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">        <span class="keyword">self</span>.updateUI(with: data) <span class="comment">// update UI on the main thread</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above code performs a long-running operation on the background thread and uses GCD to send the result to the main thread to update the UI.</p></li><li><p>Use a serial queue to ensure that operations on the same object are executed in order.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> serialQueue <span class="operator">=</span> <span class="type">DispatchQueue</span>(label: <span class="string">&quot;com.example.serialQueue&quot;</span>)</span><br><span class="line"></span><br><span class="line">serialQueue.async &#123;</span><br><span class="line">    <span class="keyword">self</span>.updateUI(with: data1) <span class="comment">// operation 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">serialQueue.async &#123;</span><br><span class="line">    <span class="keyword">self</span>.updateUI(with: data2) <span class="comment">// operation 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="10-Caused-by-Long-connection-of-Socket"><a href="#10-Caused-by-Long-connection-of-Socket" class="headerlink" title=" 10. Caused by Long connection of Socket "></a><font size=3 color=#4169E1> 10. Caused by Long connection of Socket </font></h4><p><strong>Problem analysis：</strong><br>When the server closes a connection, if the client continues to send data, according to the TCP protocol, it will receive an RST response. When the client sends data to this server again, the system will send a SIGPIPE signal to the process, telling the process that the connection has been disconnected and not to write anymore. According to the default signal handling rules, the default action of the SIGPIPE signal is to terminate or exit. Therefore, the client will exit.</p><p><strong>Sample code：</strong>  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SocketManager</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> inputStream: <span class="type">InputStream</span>?</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> outputStream: <span class="type">OutputStream</span>?</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> host: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> port: <span class="type">Int</span> <span class="operator">=</span> <span class="number">12345</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">connect</span>() &#123;</span><br><span class="line">        <span class="type">Stream</span>.getStreamsToHost(withName: host, port: port, inputStream: <span class="operator">&amp;</span>inputStream, outputStream: <span class="operator">&amp;</span>outputStream)</span><br><span class="line">        </span><br><span class="line">        inputStream<span class="operator">?</span>.open()</span><br><span class="line">        outputStream<span class="operator">?</span>.open()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">disconnect</span>() &#123;</span><br><span class="line">        inputStream<span class="operator">?</span>.close()</span><br><span class="line">        outputStream<span class="operator">?</span>.close()</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Recommended solution:：</strong><br>Here are three possible recommended solutions to avoid the crash caused by long connections of sockets:</p><p>First, when the application enters the background, immediately close the socket connection:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">applicationWillResignActive</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>) &#123;</span><br><span class="line">    socketManager.disconnect()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Second, when using the background running mode in the application, handle the socket connection correctly.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">performFetchWithCompletionHandler</span> <span class="params">completionHandler</span>: <span class="keyword">@escaping</span> (<span class="type">UIBackgroundFetchResult</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> application.backgroundTimeRemaining <span class="operator">&lt;</span> <span class="number">60</span> &#123;</span><br><span class="line">        socketManager.disconnect()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Execute background task here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The above code shows that when using Background Fetch, check the remaining background running time of the application, and close the socket connection if it is less than 1 minute.</p><p>Third, use signal(SIGPIPE,SIG_IGN) to hand over SIGPIPE to the system, which sets SIGPIPE to SIG_IGN, making the client not execute the default operation, that is, not to exit.</p><h4 id="11-Caused-by-Watch-Dog-Timeout"><a href="#11-Caused-by-Watch-Dog-Timeout" class="headerlink" title=" 11. Caused by Watch Dog Timeout "></a><font size=3 color=#4169E1> 11. Caused by Watch Dog Timeout </font></h4><p><strong>Problem analysis：</strong><br>Watchdog Timeout is a monitoring mechanism built into the iOS system that checks whether the code executed by the application in the main thread exceeds the specified time. If it times out, the system automatically terminates the execution of the application to avoid a poor user experience caused by application freezes.</p><p>Watchdog Timeout typically occurs during time-consuming operations such as network requests, IO operations, and large data processing. If these time-consuming operations are not handled correctly, it is easy to trigger Watchdog Timeout, leading to application crashes.</p><p><strong>Sample code：</strong><br>For example, executing the following code in the main thread may trigger a Watchdog timeout:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">doHeavyWork</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">1000000000</span> &#123;</span><br><span class="line">        <span class="comment">// execute a large number of loop operations</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Recommended solution:：</strong><br>First, put time-consuming operations in a separate thread to avoid occupying the main thread for too long, thereby avoiding the occurrence of Watchdog Timeout. You can use GCD or NSOperationQueue to implement this.</p><p>Second, use an asynchronous method to execute time-consuming operations and use an appropriate queue to manage the execution. For example, use DispatchQueue.global() to create a global queue, and then use the async method to asynchronously execute tasks. In addition, you can also use NSOperationQueue to manage tasks.         </p><p>Third, use a timer or RunLoop to periodically execute time-consuming operations, and check whether the time exceeds the Watchdog Timeout setting before execution. If it times out, stop executing and put the task on hold until the next execution cycle.  </p><p>Fourth, if time-consuming operations must be performed in the main thread, you can use NSRunLoop to control the execution time and periodically call the run method to ensure that the Watchdog Timeout setting is not exceeded.</p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href="https://juejin.cn/post/6844903775203753997">https://juejin.cn/post/6844903775203753997</a><br>[2] <a href="https://juejin.cn/post/6978014329333350430">https://juejin.cn/post/6978014329333350430</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> 01. Memory &amp; Performance &amp; Stability </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00. Call the Macro definition of Objective-C in Swift</title>
      <link href="/2023/03/10/Swift/07.%20Hybrid%20Programming/00.%20Call%20the%20Macro%20definition%20of%20Objective-C%20in%20Swift/"/>
      <url>/2023/03/10/Swift/07.%20Hybrid%20Programming/00.%20Call%20the%20Macro%20definition%20of%20Objective-C%20in%20Swift/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p>There are usually lots of macro definitions in Objective-C projects, as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#define kScreenScale [<span class="type">UIScreen</span> mainScreen].scale</span><br><span class="line">#define kOnePixelPointValue (<span class="number">1</span>.0f <span class="operator">/</span> kScreenScale)</span><br><span class="line">#define kScreenWidth  [[<span class="type">UIScreen</span> mainScreen] bounds].size.width</span><br><span class="line">#define kScreenHeight [[<span class="type">UIScreen</span> mainScreen] bounds].size.height</span><br><span class="line">#define kApplicationWidth  <span class="type">MIN</span>([[<span class="type">UIScreen</span> mainScreen] bounds].size.width, [[<span class="type">UIScreen</span> mainScreen] bounds].size.height)</span><br><span class="line">#define kApplicationHeight <span class="type">MAX</span>([[<span class="type">UIScreen</span> mainScreen] bounds].size.width, [[<span class="type">UIScreen</span> mainScreen] bounds].size.height)</span><br><span class="line">#define kScreenCenterX kScreenWidth <span class="operator">/</span> <span class="number">2.0</span></span><br><span class="line">#define kScreenCenterY kScreenHeight <span class="operator">/</span> <span class="number">2.0</span></span><br></pre></td></tr></table></figure><p>Actually, Swift cannot directly use the macro definitions of OC. We need to do some conversions For Swift.</p><h4 id="1-Overwrite-them-with-Swift-language-entirely"><a href="#1-Overwrite-them-with-Swift-language-entirely" class="headerlink" title=" 1. Overwrite them with Swift language entirely"></a><font size=3 color=#4169E1> 1. Overwrite them with Swift language entirely</font></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">SizeDefault</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> screenScale <span class="operator">=</span> <span class="type">UIScreen</span>.main.scale</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> onePixelPointValue <span class="operator">=</span> (<span class="number">1.0</span> <span class="operator">/</span> screenScale)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> screenWidth <span class="operator">=</span> <span class="type">UIScreen</span>.main.bounds.size.width</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> screenHeight <span class="operator">=</span> <span class="type">UIScreen</span>.main.bounds.size.height</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> applicationWidth <span class="operator">=</span> <span class="built_in">min</span>(screenWidth, screenHeight)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> applicationHeight <span class="operator">=</span> <span class="built_in">max</span>(screenWidth, screenHeight)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> screenCenterX <span class="operator">=</span> screenWidth <span class="operator">/</span> <span class="number">2.0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> screenCenterY <span class="operator">=</span> screenHeight <span class="operator">/</span> <span class="number">2.0</span></span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">UIDevice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> ako <span class="operator">=</span> <span class="type">SizeDefault</span>.<span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I overwrited all the code and wrapped them in the UIDevice extension, then I can use them as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> height <span class="operator">=</span> <span class="type">UIDevice</span>.ako.applicationHeight</span><br><span class="line"><span class="built_in">print</span>(height)</span><br></pre></td></tr></table></figure><p>This is what I recommend if you have enough time. </p><h4 id="2-Convert-them-with-inline-function-simply"><a href="#2-Convert-them-with-inline-function-simply" class="headerlink" title=" 2. Convert them with inline function simply"></a><font size=3 color=#4169E1> 2. Convert them with inline function simply</font></h4><p>In fact, there are some macros that comprise complicated logic code and you don not have enough time or confidence to overwrite them. Therefore, there is a compromise method to meet our requirement quickly and safely.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#define isIPhoneXSeries (&#123;  \</span><br><span class="line">    <span class="type">BOOL</span> iPhoneXSeries <span class="operator">=</span> <span class="type">NO</span>;  \</span><br><span class="line">    <span class="keyword">if</span> ([<span class="type">UIDevice</span> currentDevice].userInterfaceIdiom <span class="operator">!=</span> <span class="type">UIUserInterfaceIdiomPhone</span>) &#123; \</span><br><span class="line">        <span class="keyword">return</span> iPhoneXSeries; \</span><br><span class="line">    &#125; \</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>)) &#123; \</span><br><span class="line">        <span class="type">UIWindow</span> <span class="operator">*</span>mainWindow <span class="operator">=</span> [[[<span class="type">UIApplication</span> sharedApplication] delegate] window]; \</span><br><span class="line">        <span class="keyword">if</span> (mainWindow.safeAreaInsets.bottom <span class="operator">&gt;</span> <span class="number">0.0</span>) &#123; \</span><br><span class="line">            iPhoneXSeries <span class="operator">=</span> <span class="type">YES</span>; \</span><br><span class="line">        &#125; \</span><br><span class="line">    &#125; \</span><br><span class="line">    iPhoneXSeries; \</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>We can just convert it with incline function like that:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> inline <span class="type">BOOL</span> isIPhoneXSeries()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">BOOL</span> iPhoneXSeries <span class="operator">=</span> <span class="type">NO</span>;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="type">UIDevice</span> currentDevice].userInterfaceIdiom <span class="operator">!=</span> <span class="type">UIUserInterfaceIdiomPhone</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> iPhoneXSeries;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>)) &#123;</span><br><span class="line">        <span class="type">UIWindow</span> <span class="operator">*</span>mainWindow <span class="operator">=</span> [[[<span class="type">UIApplication</span> sharedApplication] delegate] window];</span><br><span class="line">        <span class="keyword">if</span> (mainWindow.safeAreaInsets.bottom <span class="operator">&gt;</span> <span class="number">0.0</span>) &#123;</span><br><span class="line">            iPhoneXSeries <span class="operator">=</span> <span class="type">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> iPhoneXSeries;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> inline <span class="type">CGFloat</span> <span class="type">AKOApplicationWidth</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> kApplicationWidth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> inline <span class="type">CGFloat</span> <span class="type">AKOApplicationHeight</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> kApplicationHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is very convenient. And then We can use it in our Project like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isIPhoneXSeries()</span><br></pre></td></tr></table></figure><p>We can also add it to UIDevice extension like as below:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">SizeDefault</span> &#123;</span><br><span class="line">  <span class="operator">...</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> isIPhoneXSeries <span class="operator">=</span> <span class="type">AKOISIPhoneXSeries</span>()</span><br><span class="line">  <span class="operator">...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 07. Hybrid Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hybrid </tag>
            
            <tag> macro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00. The Operations of zip function</title>
      <link href="/2023/03/09/Swift/06.%20Collections/00.%20Zip%20Function/"/>
      <url>/2023/03/09/Swift/06.%20Collections/00.%20Zip%20Function/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p>This zip function is not used to compress files. It is used to merge the elements of two sequences one by one to generate a new sequence.</p><h4 id="1-Merge-two-arrays-into-a-new-tuple-array"><a href="#1-Merge-two-arrays-into-a-new-tuple-array" class="headerlink" title=" 1. Merge two arrays into a new tuple array"></a><font size=3 color=#4169E1> 1. Merge two arrays into a new tuple array</font></h4><details><summary>Details</summary>In the following code, we combine zip with map to generate a new array. Note: The number of new sequences generated by the zip function is the minimum of the original sequence.<p><strong> Example Code </strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> [ <span class="string">&quot;a&quot;</span> ,  <span class="string">&quot;b&quot;</span> ,  <span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> c <span class="operator">=</span> <span class="built_in">zip</span>(a, b).map&#123; <span class="variable">$0</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment">//result: [(1, &quot;a&quot;), (2, &quot;b&quot;), (3, &quot;c&quot;)]</span></span><br></pre></td></tr></table></figure><p>Since the whole operation will stop after a short sequence ends in the zip process, we can also use one-way intervals here. The running results of the following code are the same as those above.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> c <span class="operator">=</span> <span class="built_in">zip</span>(<span class="number">1</span><span class="operator">...</span>, b).map&#123; <span class="variable">$0</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(c) </span><br><span class="line"><span class="comment">//result: [(1, &quot;a&quot;), (2, &quot;b&quot;), (3, &quot;c&quot;)]</span></span><br></pre></td></tr></table></figure></details><h4 id="2-Creating-dictionaries-from-key-value-sequences"><a href="#2-Creating-dictionaries-from-key-value-sequences" class="headerlink" title=" 2. Creating dictionaries from key value sequences"></a><font size=3 color=#4169E1> 2. Creating dictionaries from key value sequences</font></h4><details><summary>Details</summary><p>The following code combines the two arrays into a dictionary.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names <span class="operator">=</span> [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Pear&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> prices <span class="operator">=</span> [<span class="number">7</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> dict <span class="operator">=</span>  <span class="type">Dictionary</span>(uniqueKeysWithValues:<span class="built_in">zip</span>(names, prices))</span><br><span class="line"><span class="built_in">print</span>(dict)</span><br><span class="line"><span class="comment">//result: [&quot;Apple&quot;: 7, &quot;Pear&quot;: 6]</span></span><br></pre></td></tr></table></figure><p>Zip and shorthand + can be used to solve the problem of duplicate keys. For example, the array is converted into a dictionary. The dictionary key is the value of the array element, and the dictionary value is the number of occurrences of the element.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array <span class="operator">=</span> [ <span class="string">&quot;Apple&quot;</span>,  <span class="string">&quot;Pear&quot;</span>,  <span class="string">&quot;Pear&quot;</span>,  <span class="string">&quot;Orange&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> dic <span class="operator">=</span> <span class="type">Dictionary</span>(<span class="built_in">zip</span>(array, <span class="built_in">repeatElement</span>(<span class="number">1</span>, count: array.count)), uniquingKeysWith: <span class="operator">+</span>)</span><br><span class="line">print (dic)</span><br><span class="line"><span class="comment">//result: [&quot;Pear&quot;: 2, &quot;Apple&quot;: 1, &quot;Orange&quot;: 1]</span></span><br></pre></td></tr></table></figure></details><h4 id="3-Merge-the-two-arrays-into-a-new-array"><a href="#3-Merge-the-two-arrays-into-a-new-array" class="headerlink" title=" 3. Merge the two arrays into a new array"></a><font size=3 color=#4169E1> 3. Merge the two arrays into a new array</font></h4><details><summary>Details</summary><p>We know that the flatMap function can also open arrays (two-dimensional arrays, N-dimensional arrays) containing arrays into a new array, but the order of elements in the new array is one after another according to the original array order.With zip, two array elements can be inserted at intervals. The following code compares the two methods.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c <span class="operator">=</span> [a, b].flatMap(&#123; <span class="variable">$0</span> &#125;)</span><br><span class="line">print (<span class="string">&quot;c：<span class="subst">\(c)</span>&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d <span class="operator">=</span> <span class="built_in">zip</span>(a, b).flatMap(&#123;[<span class="variable">$0</span>, <span class="variable">$1</span>]&#125;)</span><br><span class="line">print (<span class="string">&quot;d：<span class="subst">\(d)</span>&quot;</span> )</span><br><span class="line"><span class="comment">//result:</span></span><br><span class="line"><span class="comment">//c：[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span></span><br><span class="line">d：[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;D&quot;</span>]</span><br></pre></td></tr></table></figure></details><h4 id="4-Other-convenient-operations"><a href="#4-Other-convenient-operations" class="headerlink" title=" 4. Other convenient operations"></a><font size=3 color=#4169E1> 4. Other convenient operations</font></h4><details><summary>Details</summary><p>4.1 Generate the corresponding button array according to the String array.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> titles <span class="operator">=</span> [ <span class="string">&quot;Button 1&quot;</span> ,  <span class="string">&quot;Button 2&quot;</span> ,  <span class="string">&quot;Button 3&quot;</span> ]</span><br><span class="line"><span class="keyword">let</span> buttons <span class="operator">=</span> <span class="built_in">zip</span>(<span class="number">0</span><span class="operator">...</span>, titles).map &#123; (i, title) -&gt;  <span class="type">UIButton</span>  <span class="keyword">in</span></span><br><span class="line">     <span class="keyword">let</span> button <span class="operator">=</span>  <span class="type">UIButton</span> (type: .system)</span><br><span class="line">     button.setTitle(title,  for :.normal)</span><br><span class="line">     button.tag <span class="operator">=</span> i</span><br><span class="line">     <span class="keyword">return</span> button</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2 Set the buttons in the button array to the colors in the corresponding color array</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">zip</span>(<span class="keyword">self</span>.buttons,  <span class="keyword">self</span>.colors).forEach &#123; (button, color)  <span class="keyword">in</span></span><br><span class="line">     button.backgroundColor <span class="operator">=</span> color</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="built_in">zip</span>(<span class="keyword">self</span>.buttons,  <span class="keyword">self</span>.colors).forEach &#123;</span><br><span class="line">     <span class="variable">$0</span>.<span class="number">0</span>.backgroundColor <span class="operator">=</span> <span class="variable">$0</span>.<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href="https://blog.csdn.net/mo_xiao_mo/article/details/78424769">https://blog.csdn.net/mo_xiao_mo/article/details/78424769</a> </p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 06. Collections </category>
          
      </categories>
      
      
        <tags>
            
            <tag> collection </tag>
            
            <tag> zip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00. Summary Of Memory Leak</title>
      <link href="/2023/03/08/iOS/01.%20Memory%20&amp;%20Performance%20&amp;%20Stability/00.%20Summary%20of%20Memory%20Leak/"/>
      <url>/2023/03/08/iOS/01.%20Memory%20&amp;%20Performance%20&amp;%20Stability/00.%20Summary%20of%20Memory%20Leak/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p>Questions about Memory leak (memory leak), if the interview was asked this question and such questions, mainly related to the following 3 aspects.</p><ul><li>What are the common scenarios of memory leaks, and list a few common examples?</li><li>How to locate and solve memory leaks that actually occur during development?</li><li>How to avoid memory leaks in development and what are the methods?</li></ul><p>Below we summarize these 3 aspects respectively.</p><h4 id="Common-scenarios-for-Memory-Leak"><a href="#Common-scenarios-for-Memory-Leak" class="headerlink" title=" Common scenarios for Memory Leak"></a><font size=3 color=#4169E1> Common scenarios for Memory Leak</font></h4><p><strong>1. Circular References</strong><br>Under the ARC mechanism, circular references are a major cause of memory leaks, and it is also divided into many specific scenarios, such as</p><ul><li>Circular references between two class objects.</li><li>Circular reference problems in Blocks (including GCD or other system Blocks, etc.).</li><li>Circular reference problem in Timer. </li><li>Circular reference problem brought by delegate.</li><li>Scenarios such as property observation and listening classes.</li></ul><p><strong>2. improper object life cycle management</strong><br>This kind needs to be analyzed in the context of actual business problems, e.g.</p><ul><li>Static fields or other global objects lead to improper holding causing memory leaks.</li><li>The reference relationship of collection classes, etc. is improper or not released in time, etc.</li></ul><p><strong>3. untimely release of objects</strong><br>Some objects require manual memory release, such as the Core Foundation (CF) and Core Graphics (CG) framework objects. If these objects are not released in time, it may lead to memory leaks.   </p><p><strong>4. Untimely closure or release of resources</strong><br>Untimely closure (or failure to release) of resource classes is also a common memory leak scenario, for example</p><ul><li>The file is opened (FileHandle) and not closed in time.</li><li>The URLSession object of a network request is not released in time.</li></ul><h4 id="How-to-locate-and-solve-the-memory-leak"><a href="#How-to-locate-and-solve-the-memory-leak" class="headerlink" title=" How to locate and solve the memory leak"></a><font size=3 color=#4169E1> How to locate and solve the memory leak</font></h4><p>In fact, after finding the problem, it is basically easy to solve, for example:</p><p>Circular reference means to break the cycle by using weak; If the life cycle of the object is improper, the holder can be changed or the code needs to be redesigned; CF or CG objects need to be released manually; The occupation of resource class also needs to be released manually in time.</p><p>But the main problem is how to find the leaked code.</p><p><strong><strong><font size=3>1. Manual debugging method</font></strong>  </strong></p><p>When we realize that there is a leak, there are usually obvious symptoms, such as VC Pop failure.</p><p>If we are familiar with the code, generally, I believe many people will directly find the code for manual debugging. Common means include:</p><ul><li>Override dealloc or deinit methods</li></ul><p>We can try to add a log to the dealloc or deinit method breakpoint of some classes. If there is no expected execution, it is a suspected leak point.</p><ul><li>Manually check reference count</li></ul><p>Manually checking the reference count of an object can help us find out whether there is a memory leak caused by a reference count error. We can manually check the reference count of an object using the retentCount property in Objective-C or Swift.</p><ul><li>Write some extra test code</li></ul><p>If the memory leak point is relatively obscure, it can be reproduced by writing code of some test cases, such as 9999 consecutive cycles to expand the problem and cause memory exhaustion and crash, and then locate the code according to the stack, which is also a common method to locate probabilistic crashes;</p><ul><li>One-by-one ranking method</li></ul><p>Comment out the code of the problem one by one until the problem point is found. Similar methods are often used to troubleshoot the crash problem during development. Although it looks very low, it is very effective.</p><p><strong><strong><font size=3>2. Tools</font></strong>  </strong></p><p>There are many ways to use this, such as:</p><ul><li><p>Instruments toolbox, which uses Leaks tool or memory debugger Analyze to analyze;</p></li><li><p>The Memory Graph in Xcode Memory Debugger can help us analyze the memory reference relationship of objects and find circular references and memory leaks.</p></li><li><p>Third-party detection tools, such as MLeaksFinder, FBRetainCycleDetector, LeakDetector, HeapInspector, etc.</p></li><li><p>Static analysis tools, such as Clang static analyzer, Infer, OCLint, SwiftLint and other tools. These tools generally find some memory leak code incidentally, which can give us some tips or warnings.</p></li></ul><h4 id="How-to-avoid-Memory-Leak"><a href="#How-to-avoid-Memory-Leak" class="headerlink" title="How to avoid Memory Leak?"></a><font size=3 color=#4169E1>How to avoid Memory Leak?</font></h4><p>In actual development, it is unlikely that writing a piece of code to run the tools of Instrument immediately, even some MLeaksFinder these often false alarm tools are too annoying to close directly.<br>Then How can we avoid and minimize the generation of problem code?</p><p>First, there should be some risk awareness. For example, Timer since the choice of it, you should know that its biggest risk is easy to cause memory problems. Know by heart some scenarios that can easily lead to leaks. Also, for example, be careful with global variables or single instances, etc.</p><p>Second, get into some habits. For example, after writing a piece of code or receiving a piece of code, make sure the object is expected to be released at the dealloc or deinit breakpoint. Also for example, Swift as far as possible to take the value type, rather than reference types; development after self-test, some memory detection tools are turned on as an aid to detection.</p><p>Third, good system design. Some business scenarios are easy to generate leakage, for example, once I participated in the development of a live business, the room VC and the room’s only data model object dataModel is easy to refer to each other, because the dataModel carries a lot of business information, the business is extremely dependent on the dataModel, the object is therefore also passed very deep and wide, and a circular reference occurs easily. For this kind of improper design at the beginning, only a patch can be fixed later (maintain a dataModel weak reference collection, each time you use the id to query and get the corresponding room dataModel object, the business only needs to maintain an id String object or a dictionary object to store the least information). Similar business scenarios are commodity detail pages and so on.</p><p>Fourth, the regular project code to do a “physical examination”, the general project volume is larger, this is very necessary, run the Instrumentation or Memory Graph, almost every time there are gains.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
          <category> 01. Memory &amp; Performance &amp; Stability </category>
          
      </categories>
      
      
        <tags>
            
            <tag> memory </tag>
            
            <tag> leak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01. Summary of the keyword &#39;associatedtype&#39;</title>
      <link href="/2023/03/08/Swift/05.%20Protocols/01.%20Associatedtype/"/>
      <url>/2023/03/08/Swift/05.%20Protocols/01.%20Associatedtype/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p>In Swift, When defining a protocol, we can’t use generics in a protocol as in a class. The following code is incorrect and will be reported as an error.</p><p><strong> Example Code </strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Stackble</span> &lt;<span class="title class_">Element</span>&gt; &#123; </span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">push</span>(<span class="keyword">_</span> <span class="params">element</span>:<span class="type">Element</span>)</span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">pop</span>()-&gt;<span class="type">Element</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">top</span>() -&gt;<span class="type">Element</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">size</span>() -&gt;<span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Therefore, associated types can solve this problem in Swift. It’s sometimes useful to declare one or more associated types as part of the protocol’s definition. An associated type gives a placeholder name to a type that’s used as part of the protocol. The actual type to use for that associated type isn’t specified until the protocol is adopted. Associated types are specified with the associatedtype keyword.</p><p><strong> Example Code </strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Stackble</span> &#123;    </span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span> </span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">push</span>(<span class="keyword">_</span> <span class="params">element</span>:<span class="type">Element</span>)</span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">pop</span>()-&gt;<span class="type">Element</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">top</span>() -&gt;<span class="type">Element</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">size</span>() -&gt;<span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Associated types can be applied in situations as follows:</p><h2 id="1-Associated-type-be-replaced-by-concrete-type"><a href="#1-Associated-type-be-replaced-by-concrete-type" class="headerlink" title="1. Associated type be replaced by concrete type "></a><strong><font size=3 >1. Associated type be replaced by concrete type </font></strong></h2><p><strong> Example Code </strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StringStack</span>: <span class="title class_">Stackble</span> &#123;</span><br><span class="line">    <span class="comment">//typealias String = Element</span></span><br><span class="line">    <span class="keyword">var</span> elements <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">push</span>(<span class="keyword">_</span> <span class="params">element</span>:<span class="type">String</span>)&#123;   </span><br><span class="line">        </span><br><span class="line">        elements.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">pop</span>()-&gt;<span class="type">String</span>&#123;</span><br><span class="line">        elements.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">top</span>() -&gt;<span class="type">String</span>&#123;</span><br><span class="line">        elements.last<span class="operator">!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">size</span>() -&gt;<span class="type">Int</span>&#123;</span><br><span class="line">        elements.count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thanks to Swift’s type inference, we don’t actually need to declare a concrete Element of String as part of the definition of StringStack. </p><h2 id="2-Associated-type-be-replaced-by-generic-type"><a href="#2-Associated-type-be-replaced-by-generic-type" class="headerlink" title="2. Associated type be replaced by generic type "></a><strong><font size=3 >2. Associated type be replaced by generic type </font></strong></h2><p>In a class with generics, generic types replace association types.</p><p><strong> Example Code </strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &lt;<span class="title class_">E</span>&gt;: <span class="title class_">Stackble</span> &#123;</span><br><span class="line">    <span class="comment">//typealias E = Element</span></span><br><span class="line">    <span class="keyword">var</span> elements <span class="operator">=</span> [<span class="type">E</span>]()  </span><br><span class="line">     <span class="keyword">func</span> <span class="title function_">push</span>(<span class="keyword">_</span> <span class="params">element</span>:<span class="type">E</span>) &#123;   </span><br><span class="line">        elements.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">func</span> <span class="title function_">pop</span>()-&gt;<span class="type">E</span>&#123;</span><br><span class="line">        elements.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">top</span>() -&gt;<span class="type">E</span>&#123;</span><br><span class="line">        elements.last<span class="operator">!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">size</span>() -&gt;<span class="type">Int</span>&#123;</span><br><span class="line">        elements.count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Points-for-Attention"><a href="#3-Points-for-Attention" class="headerlink" title="3. Points for Attention "></a><strong><font size=3 >3. Points for Attention </font></strong></h2><p>A protocol contains associated types cannot be used as return values and function parameters.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">protocol</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">// without any associated types</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Person</span> : <span class="title class_">Runnable</span> &#123;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Car</span> : <span class="title class_">Runnable</span> &#123;</span><br><span class="line">     </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">func</span> <span class="title function_">get</span>(<span class="keyword">_</span> <span class="params">type</span>:<span class="type">Int</span>) -&gt; <span class="type">Runnable</span> &#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="number">0</span> <span class="operator">==</span> type) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="type">Person</span>()</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="type">Car</span>()</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//call as follows:</span></span><br><span class="line"><span class="keyword">var</span> r1 <span class="operator">=</span> <span class="keyword">get</span>(<span class="number">0</span>) </span><br><span class="line"><span class="keyword">var</span> r2 <span class="operator">=</span> <span class="keyword">get</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r1=&quot;</span>,r1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;r2=&quot;</span>,r2)</span><br><span class="line"><span class="comment">//everything is ok now</span></span><br></pre></td></tr></table></figure><p>The following is the code of compilation error.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Speed</span></span><br><span class="line">    <span class="keyword">var</span> speed : <span class="type">Speed</span> &#123;<span class="keyword">get</span>&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:<span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> speed: <span class="type">Double</span> <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>:<span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> speed: <span class="type">Double</span> <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this code will be reported an error</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">get</span> (<span class="params">run</span>: <span class="type">Runnable</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// this code will be reported an error too.</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">get</span>(<span class="keyword">_</span> <span class="params">type</span>:<span class="type">Int</span>) -&gt; <span class="type">Runnable</span> &#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> <span class="operator">==</span> type )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Person</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Car</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can fix this point just by a generic Type that conform to the protocol.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">get</span>&lt;<span class="type">T</span>:<span class="type">Runnable</span>&gt;(<span class="keyword">_</span> <span class="params">type</span>:<span class="type">Int</span>)-&gt; <span class="type">T</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span>  <span class="number">0</span> <span class="operator">==</span> type &#123;</span><br><span class="line">        <span class="keyword">let</span> result <span class="operator">=</span> <span class="type">Person</span>() <span class="keyword">as!</span> <span class="type">T</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Car</span>() <span class="keyword">as!</span> <span class="type">T</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href="https://docs.swift.org/swift-book/LanguageGuide/Generics.html">https://docs.swift.org/swift-book/LanguageGuide/Generics.html</a><br>[2] <a href="https://blog.csdn.net/boildoctor/article/details/113116245">https://blog.csdn.net/boildoctor/article/details/113116245</a></p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 05. Protocols </category>
          
      </categories>
      
      
        <tags>
            
            <tag> protocol </tag>
            
            <tag> associatedtype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00. Summary of Protocols</title>
      <link href="/2023/03/07/Swift/05.%20Protocols/00.%20Summary%20of%20Protocols/"/>
      <url>/2023/03/07/Swift/05.%20Protocols/00.%20Summary%20of%20Protocols/</url>
      
        <content type="html"><![CDATA[<p>Protocols in Swift have many special characters, So I summarize them here to make it clear.</p><h4 id="1-Property-Requirements"><a href="#1-Property-Requirements" class="headerlink" title="1. Property Requirements"></a><font size=3 color=#4169E1>1. Property Requirements</font></h4><p><font size=2 color=#4169E1>1.1 ‘var’ keyword always be with the properties.</font><br>Firstly, Property requirements are always declared as variable properties, prefixed with the <strong>var</strong> keyword. Gettable and settable properties are indicated by writing { get set } after their type declaration, and gettable properties are indicated by writing { get }.<br><font size=2 color=#4169E1>1.2 ‘mutating’ keyword not be forgotten.</font><br>Secondly, If you define a protocol instance method requirement that’s intended to mutate instances of any type that adopts the protocol, mark the method with the <strong>mutating</strong> keyword as part of the protocol’s definition. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">SomeProtocol</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mustBeSettable: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> doesNotNeedToBeSettable: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">toggle</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Extension-and-Protocol"><a href="#2-Extension-and-Protocol" class="headerlink" title="2. Extension and Protocol"></a><font size=3 color=#4169E1>2. Extension and Protocol</font></h4><p><font size=2 color=#4169E1>2.1 Extend an existing type without accessing source code.</font><br>1.1 Extend an existing type<br>You can extend an existing type to adopt and conform to a new protocol, even if you don’t have access to the source code for the existing type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">TextRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> textualDescription: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Dice</span>: <span class="title class_">TextRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> textualDescription: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A <span class="subst">\(sides)</span>-sided dice&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size=2 color=#4169E1>2.2 Declaring Protocol Adoption with an Extension.</font><br>If a type already conforms to all of the requirements of a protocol, but hasn’t yet stated that it adopts that protocol, you can make it adopt the protocol with an empty extension:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Hamster</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> textualDescription: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A hamster named <span class="subst">\(name)</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Hamster</span>: <span class="title class_">TextRepresentable</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><font size=2 color=#4169E1>2.3 Protocol Extensions.</font><br>Protocols can be extended directly to provide method, initializer, subscript, and computed property implementations to conforming types. This allows you to define behavior on protocols themselves, rather than in each type’s individual conformance or in a global function.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">RandomNumberGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">random</span>() -&gt; <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">RandomNumberGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">randomBool</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> random() <span class="operator">&gt;</span> <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details><summary>Example Code Details</summary><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">RandomNumberGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">random</span>() -&gt; <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">RandomNumberGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">randomBool</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> random() <span class="operator">&gt;</span> <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearGeneratorA</span>: <span class="title class_">RandomNumberGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> lastRandom <span class="operator">=</span> <span class="number">42.0</span></span><br><span class="line">    <span class="keyword">let</span> m <span class="operator">=</span> <span class="number">1000.0</span></span><br><span class="line">    <span class="keyword">let</span> a <span class="operator">=</span> <span class="number">3877.0</span></span><br><span class="line">    <span class="keyword">let</span> c <span class="operator">=</span> <span class="number">29573.0</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">random</span>() -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        lastRandom <span class="operator">=</span> ((lastRandom <span class="operator">*</span> a <span class="operator">+</span> c)</span><br><span class="line">            .truncatingRemainder(dividingBy:m))</span><br><span class="line">        <span class="keyword">return</span> lastRandom <span class="operator">/</span> m</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearGeneratorB</span>: <span class="title class_">RandomNumberGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> lastRandom <span class="operator">=</span> <span class="number">42.0</span></span><br><span class="line">    <span class="keyword">let</span> m <span class="operator">=</span> <span class="number">2000.0</span></span><br><span class="line">    <span class="keyword">let</span> a <span class="operator">=</span> <span class="number">3877.0</span></span><br><span class="line">    <span class="keyword">let</span> c <span class="operator">=</span> <span class="number">29573.0</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">random</span>() -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        lastRandom <span class="operator">=</span> ((lastRandom <span class="operator">*</span> a <span class="operator">+</span> c)</span><br><span class="line">            .truncatingRemainder(dividingBy:m))</span><br><span class="line">        <span class="keyword">return</span> lastRandom <span class="operator">/</span> m</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Verify as follows:</span></span><br><span class="line"><span class="keyword">let</span> generatorA <span class="operator">=</span> <span class="type">LinearGeneratorA</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here&#x27;s a random number A: <span class="subst">\(generatorA.random())</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;And here&#x27;s a random Boolean A: <span class="subst">\(generatorA.randomBool())</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> generatorB <span class="operator">=</span> <span class="type">LinearGeneratorB</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here&#x27;s a random number B: <span class="subst">\(generatorB.random())</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;And here&#x27;s a random Boolean B: <span class="subst">\(generatorB.randomBool())</span>&quot;</span>)</span><br></pre></td></tr></table></figure></details>You can use protocol extensions to provide a default implementation to any method or computed property requirement of that protocol.<h4 id="3-Class-Only-Protocols"><a href="#3-Class-Only-Protocols" class="headerlink" title=" 3. Class-Only Protocols"></a><font size=3 color=#4169E1> 3. Class-Only Protocols</font></h4><p>You can limit protocol adoption to class types (and not structures or enumerations) by adding the AnyObject protocol to a protocol’s inheritance list.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">RandomNumberGenerator</span> : <span class="title class_">LinearGeneratorA</span>, <span class="title class_">Generator</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">random</span>() -&gt; <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearGeneratorA</span>: <span class="title class_">RandomNumberGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> lastRandom <span class="operator">=</span> <span class="number">42.0</span></span><br><span class="line">    <span class="keyword">let</span> m <span class="operator">=</span> <span class="number">1000.0</span></span><br><span class="line">    <span class="keyword">let</span> a <span class="operator">=</span> <span class="number">3877.0</span></span><br><span class="line">    <span class="keyword">let</span> c <span class="operator">=</span> <span class="number">29573.0</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">random</span>() -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        lastRandom <span class="operator">=</span> ((lastRandom <span class="operator">*</span> a <span class="operator">+</span> c)</span><br><span class="line">            .truncatingRemainder(dividingBy:m))</span><br><span class="line">        <span class="keyword">return</span> lastRandom <span class="operator">/</span> m</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And It will be report errors if you try to do like as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinearGeneratorB</span>: <span class="title class_">RandomNumberGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> lastRandom <span class="operator">=</span> <span class="number">42.0</span></span><br><span class="line">    <span class="keyword">let</span> m <span class="operator">=</span> <span class="number">2000.0</span></span><br><span class="line">    <span class="keyword">let</span> a <span class="operator">=</span> <span class="number">3877.0</span></span><br><span class="line">    <span class="keyword">let</span> c <span class="operator">=</span> <span class="number">29573.0</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">random</span>() -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        lastRandom <span class="operator">=</span> ((lastRandom <span class="operator">*</span> a <span class="operator">+</span> c)</span><br><span class="line">            .truncatingRemainder(dividingBy:m))</span><br><span class="line">        <span class="keyword">return</span> lastRandom <span class="operator">/</span> m</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Besides, we can not limit protocol adoption to structures or enumerations types like that:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">RandomNumberGenerator</span> : <span class="title class_">LinearGeneratorA</span>, <span class="title class_">Generator</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">random</span>() -&gt; <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LinearGeneratorA</span>: <span class="title class_">RandomNumberGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> lastRandom <span class="operator">=</span> <span class="number">42.0</span></span><br><span class="line">    <span class="keyword">let</span> m <span class="operator">=</span> <span class="number">1000.0</span></span><br><span class="line">    <span class="keyword">let</span> a <span class="operator">=</span> <span class="number">3877.0</span></span><br><span class="line">    <span class="keyword">let</span> c <span class="operator">=</span> <span class="number">29573.0</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">random</span>() -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        lastRandom <span class="operator">=</span> ((lastRandom <span class="operator">*</span> a <span class="operator">+</span> c)</span><br><span class="line">            .truncatingRemainder(dividingBy:m))</span><br><span class="line">        <span class="keyword">return</span> lastRandom <span class="operator">/</span> m</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// this is wrong.</span></span><br></pre></td></tr></table></figure><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href="https://docs.swift.org/swift-book/LanguageGuide/Protocols.html">https://docs.swift.org/swift-book/LanguageGuide/Protocols.html</a><br>[2] <a href="https://blog.csdn.net/Forever_wj/article/details/118767086">https://blog.csdn.net/Forever_wj/article/details/118767086</a></p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 05. Protocols </category>
          
      </categories>
      
      
        <tags>
            
            <tag> protocol </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03. Recursive Enumeration</title>
      <link href="/2023/03/06/Swift/04.%20Enumerations/03.%20Recursive%20Enumeration/"/>
      <url>/2023/03/06/Swift/04.%20Enumerations/03.%20Recursive%20Enumeration/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p>Enumerations and cases can be marked as indirect, which means that their associated values are stored indirectly, which allows us to define recursive data structures.<br><strong>Example Code</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ArithmeticExpression</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">indirect</span> <span class="keyword">case</span> addition(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">    <span class="keyword">indirect</span> <span class="keyword">case</span> multiplication(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// or </span></span><br><span class="line"><span class="keyword">indirect</span> <span class="keyword">enum</span> <span class="title class_">ArithmeticExpression</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> addition(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">    <span class="keyword">case</span> multiplication(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Call as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> five <span class="operator">=</span> <span class="type">ArithmeticExpression</span>.number(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> four <span class="operator">=</span> <span class="type">ArithmeticExpression</span>.number(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> sum <span class="operator">=</span> <span class="type">ArithmeticExpression</span>.addition(five, four)</span><br><span class="line"><span class="keyword">let</span> product <span class="operator">=</span> <span class="type">ArithmeticExpression</span>.multiplication(sum, <span class="type">ArithmeticExpression</span>.number(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">evaluate</span>(<span class="keyword">_</span> <span class="params">expression</span>: <span class="type">ArithmeticExpression</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> expression &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .number(value):</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .addition(left, right):</span><br><span class="line">        <span class="keyword">return</span> evaluate(left) <span class="operator">+</span> evaluate(right)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .multiplication(left, right):</span><br><span class="line">        <span class="keyword">return</span> evaluate(left) <span class="operator">*</span> evaluate(right) <span class="comment">// (5 + 4) * 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(evaluate(product))</span><br><span class="line"></span><br><span class="line"><span class="comment">// “18”</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 04. Enumerations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> enumeration </tag>
            
            <tag> recursive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02. Inclue Enumeration</title>
      <link href="/2023/03/05/Swift/04.%20Enumerations/02.%20Include%20Enumeration/"/>
      <url>/2023/03/05/Swift/04.%20Enumerations/02.%20Include%20Enumeration/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p>We can also embed enumerations in structures or classes.</p><p><strong>Example Code</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MyCharacter</span> &#123;</span><br><span class="line">   <span class="keyword">enum</span> <span class="title class_">CharacterType</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> thief</span><br><span class="line">        <span class="keyword">case</span> warrior</span><br><span class="line">        <span class="keyword">case</span> knight</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">enum</span> <span class="title class_">Weapon</span> &#123;</span><br><span class="line">       <span class="keyword">case</span> bow</span><br><span class="line">       <span class="keyword">case</span> sword</span><br><span class="line">       <span class="keyword">case</span> lance</span><br><span class="line">       <span class="keyword">case</span> dagger</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> type: <span class="type">CharacterType</span></span><br><span class="line">   <span class="keyword">let</span> weapon: <span class="type">Weapon</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Call as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> warrior <span class="operator">=</span> <span class="type">MyCharacter</span>(type: .warrior, weapon: .sword)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 04. Enumerations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> enumeration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01. Nested Enumeration</title>
      <link href="/2023/03/04/Swift/04.%20Enumerations/01.%20Nested%20Enumeration/"/>
      <url>/2023/03/04/Swift/04.%20Enumerations/01.%20Nested%20Enumeration/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p> <strong>Example Code</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Character</span> &#123;</span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">Weapon</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Bow</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Sword</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Lance</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Dagger</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">Helmet</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Wooden</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Iron</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Diamond</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Thief</span></span><br><span class="line">  <span class="keyword">case</span> <span class="type">Warrior</span></span><br><span class="line">  <span class="keyword">case</span> <span class="type">Knight</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Access like this:</span></span><br><span class="line"><span class="keyword">let</span> character <span class="operator">=</span> <span class="type">Character</span>.<span class="type">Thief</span></span><br><span class="line"><span class="keyword">let</span> weapon <span class="operator">=</span> <span class="type">Character</span>.<span class="type">Weapon</span>.<span class="type">Bow</span></span><br><span class="line"><span class="keyword">let</span> helmet <span class="operator">=</span> <span class="type">Character</span>.<span class="type">Helmet</span>.<span class="type">Iron</span></span><br></pre></td></tr></table></figure><p>When accessing nested enumeration members, it is not necessary to enter such a long level every time to access them. You can use convenient methods to access them directly.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">strength</span>(<span class="params">of</span> <span class="params">character</span>: <span class="type">Character</span>, </span><br><span class="line"></span><br><span class="line">              <span class="params">with</span> <span class="params">weapon</span>: <span class="type">Character</span>.<span class="type">Weapon</span>, </span><br><span class="line"></span><br><span class="line">              <span class="params">and</span> <span class="params">armor</span>: <span class="type">Character</span>.<span class="type">Helmet</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">strength(of: .thief, with: .bow, and: .wooden)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 04. Enumerations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> enumeration </tag>
            
            <tag> nested </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00. Summary of Enumerations</title>
      <link href="/2023/03/03/Swift/04.%20Enumerations/00.%20Summary%20of%20Enumerations/"/>
      <url>/2023/03/03/Swift/04.%20Enumerations/00.%20Summary%20of%20Enumerations/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><h4 id="1-General"><a href="#1-General" class="headerlink" title=" 1. General "></a><font size=3 color=#4169E1> 1. General </font></h4><p>We define an enumeration in Objective-C&#x2F;C as follow:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef enum &#123;</span><br><span class="line">    AFEncapsulationBoundaryPhase = 1,</span><br><span class="line">    AFHeaderPhase                = 2,</span><br><span class="line">    AFBodyPhase                  = 3,</span><br><span class="line">    AFFinalBoundaryPhase         = 4,</span><br><span class="line">&#125; AFHTTPBodyPartReadPhase;</span><br></pre></td></tr></table></figure><p>Or like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, RoleItemType) &#123;</span><br><span class="line">    RoleItemLabelType = 0,  </span><br><span class="line">    RoleItemImageType = 1,   </span><br><span class="line">    RoleItemMixType = 2,     </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>But In Swift we need to define an enumeration like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">CompassPoint</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> north</span><br><span class="line">    <span class="keyword">case</span> south</span><br><span class="line">    <span class="keyword">case</span> east</span><br><span class="line">    <span class="keyword">case</span> west</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unlike in C&#x2F;OC, enumeration in Swift is a completely different thing. It is somewhat similar to struct. It is very flexible and has a wide range of uses. Enumeration in Swift has the following characteristics:  </p><blockquote><ul><li>It is of value type.</li><li>It can conform to protocols to provide standard functionality.</li><li>It can be extended to expand their functionality beyond their original implementation.</li><li>It can also define initializers to provide an initial case value and define common functions and properties(computed properties).   </li><li>It supports recursion.</li></ul></blockquote><p>Enumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes.</p><h4 id="2-Associated-Values-and-Raw-Values"><a href="#2-Associated-Values-and-Raw-Values" class="headerlink" title=" 2. Associated Values and Raw Values "></a><font size=3 color=#4169E1> 2. Associated Values and Raw Values </font></h4><p><strong><strong><font size=3 color=#F5F5F5>2.1 Associated Values</font></strong>  </strong></p><p>Firstly, Associated Values can have different member types. for example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> &#123;<span class="number">10</span>,<span class="number">0.8</span>,<span class="string">&quot;Hello&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>Secondly, It always bases on Constant or variable. Thirdly, Associated Value will be set when you create a new constant or variable based on the enumeration member, and its value can be different each time you do so.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Name</span>(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Mark</span>(<span class="type">Int</span>,<span class="type">Int</span>,<span class="type">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> studDetails <span class="operator">=</span> <span class="type">Student</span>.<span class="type">Name</span>(<span class="string">&quot;Runoob&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> studMarks <span class="operator">=</span> <span class="type">Student</span>.<span class="type">Mark</span>(<span class="number">98</span>,<span class="number">97</span>,<span class="number">95</span>)</span><br><span class="line"><span class="keyword">switch</span> studMarks &#123;</span><br><span class="line"><span class="keyword">case</span> .<span class="type">Name</span>(<span class="keyword">let</span> studName):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Student Name: <span class="subst">\(studName)</span>。&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="type">Mark</span>(<span class="keyword">let</span> <span class="type">Mark1</span>, <span class="keyword">let</span> <span class="type">Mark2</span>, <span class="keyword">let</span> <span class="type">Mark3</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Student Mark: <span class="subst">\(Mark1)</span>,<span class="subst">\(Mark2)</span>,<span class="subst">\(Mark3)</span>。&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><strong><font size=3 color=#F5F5F5>2.2 Raw Values</font></strong>  </strong><br>Firstly, Raw Values have the same member types. for example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> &#123;<span class="number">10</span>,<span class="number">35</span>,<span class="number">50</span>&#125;</span><br></pre></td></tr></table></figure><p>It is pre-populated values and fixed.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ASCIIControlCharacter</span>: <span class="title class_">Character</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> tab <span class="operator">=</span> <span class="string">&quot;<span class="subst">\t</span>&quot;</span></span><br><span class="line">    <span class="keyword">case</span> lineFeed <span class="operator">=</span> <span class="string">&quot;<span class="subst">\n</span>&quot;</span></span><br><span class="line">    <span class="keyword">case</span> carriageReturn <span class="operator">=</span> <span class="string">&quot;<span class="subst">\r</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NOTE<br>Raw values are not the same as associated values. Raw values are set to prepopulate values when you first define the enumeration in your code, like the three ASCII codes above. The raw value for a particular enumeration case is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s cases, and can be different each time you do so.</p></blockquote><p>Usually, An enumeration that has Declaration Type can be implicitly assigned and you do not need to write them all, for example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Month</span>: <span class="title class_">Int</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">January</span> <span class="operator">=</span> <span class="number">1</span>, <span class="type">February</span>, <span class="type">March</span>, <span class="type">April</span>, <span class="type">May</span>, <span class="type">June</span>, <span class="type">July</span>, <span class="type">August</span>, <span class="type">September</span>, <span class="type">October</span>, <span class="type">November</span>, <span class="type">December</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-Add-methods-and-properties-to-enumerations"><a href="#3-Add-methods-and-properties-to-enumerations" class="headerlink" title=" 3. Add methods and properties to enumerations "></a><font size=3 color=#4169E1> 3. Add methods and properties to enumerations </font></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Device</span> : <span class="title class_">Int</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> iPhone4s</span><br><span class="line">    <span class="keyword">case</span> iPhone5</span><br><span class="line">    <span class="keyword">case</span> iPhone6</span><br><span class="line">    <span class="keyword">case</span> iPhone7</span><br><span class="line">    <span class="keyword">var</span> introduced: <span class="type">Int</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> .iPhone4s: <span class="keyword">return</span> <span class="number">2011</span></span><br><span class="line">            <span class="keyword">case</span> .iPhone5: <span class="keyword">return</span> <span class="number">2012</span></span><br><span class="line">            <span class="keyword">case</span> .iPhone6: <span class="keyword">return</span> <span class="number">2014</span></span><br><span class="line">            <span class="keyword">case</span> .iPhone7: <span class="keyword">return</span> <span class="number">2016</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> device <span class="operator">=</span> <span class="type">Device</span>.iPhone5</span><br><span class="line"><span class="built_in">print</span>(device.introduced)</span><br><span class="line"><span class="comment">/*result:</span></span><br><span class="line"><span class="comment">2012</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>We try to extend this enumeration as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">Device</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">detailedIntroduced</span>()  &#123;</span><br><span class="line">            <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> .iPhone4s: <span class="built_in">print</span>(<span class="string">&quot;published in 2011&quot;</span>)</span><br><span class="line">            <span class="keyword">case</span> .iPhone5: <span class="built_in">print</span>(<span class="string">&quot;published in 2012&quot;</span>)</span><br><span class="line">            <span class="keyword">case</span> .iPhone6: <span class="built_in">print</span>(<span class="string">&quot;published in 2014&quot;</span>)</span><br><span class="line">            <span class="keyword">case</span> .iPhone7: <span class="built_in">print</span>(<span class="string">&quot;published in 2016&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> device <span class="operator">=</span> <span class="type">Device</span>.iPhone5</span><br><span class="line">device.detailedIntroduced()</span><br><span class="line"><span class="comment">/* result:</span></span><br><span class="line"><span class="comment">published in 2012</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="4-Enumeration-and-Protocol"><a href="#4-Enumeration-and-Protocol" class="headerlink" title=" 4. Enumeration and Protocol "></a><font size=3 color=#4169E1> 4. Enumeration and Protocol </font></h4><p>Enumeration can conform to protocols to provide standard functionality.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Beverage</span>: <span class="title class_">CaseIterable</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> coffee, tea, juice</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> numberOfChoices <span class="operator">=</span> <span class="type">Beverage</span>.allCases.count</span><br><span class="line"><span class="keyword">for</span> beverage <span class="keyword">in</span> <span class="type">Beverage</span>.allCases &#123;</span><br><span class="line">    <span class="built_in">print</span>(beverage)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Enumeration-and-Generics"><a href="#5-Enumeration-and-Generics" class="headerlink" title=" 5. Enumeration and Generics"></a><font size=3 color=#4169E1> 5. Enumeration and Generics</font></h4><p>A typical example of the application of enumerations in generics is ‘Optional’. ‘Optional’ is an enumeration like that:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Optional</span>&lt;<span class="title class_">T</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Some</span>(<span class="type">T</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="type">None</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enumeration can have multiple generic parameters, for example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Either</span>&lt;<span class="title class_">T1</span>, <span class="title class_">T2</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Left</span>(<span class="type">T1</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Right</span>(<span class="type">T2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href="https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html">https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html</a><br>[2] <a href="https://www.jianshu.com/p/6f5f7a908301">https://www.jianshu.com/p/6f5f7a908301</a><br>[3] <a href="https://juejin.cn/post/7053223443046596644">https://juejin.cn/post/7053223443046596644</a></p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 04. Enumerations </category>
          
      </categories>
      
      
        <tags>
            
            <tag> enumeration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04. Why should we avoid using closures in structs?</title>
      <link href="/2023/03/02/Swift/03.%20Structs/04.%20Why%20should%20we%20avoid%20using%20closures%20in%20structs?/"/>
      <url>/2023/03/02/Swift/03.%20Structs/04.%20Why%20should%20we%20avoid%20using%20closures%20in%20structs?/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p>Look at the following example, it will have a surprise result.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> speed: <span class="type">Float</span> <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> increaseSpeed: (() -&gt; ())<span class="operator">?</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myCar <span class="operator">=</span> <span class="type">Car</span>()</span><br><span class="line">myCar.increaseSpeed <span class="operator">=</span> &#123;</span><br><span class="line">    myCar.speed <span class="operator">+=</span> <span class="number">30</span> <span class="comment">// The retain cycle occurs here. We cannot use [weak myCar] as myCar is a value type.</span></span><br><span class="line">&#125;</span><br><span class="line">myCar.increaseSpeed<span class="operator">?</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My car&#x27;s speed :&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(myCar.speed) <span class="comment">// Prints 30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myNewCar <span class="operator">=</span> myCar</span><br><span class="line">myNewCar.increaseSpeed<span class="operator">?</span>()</span><br><span class="line">myNewCar.increaseSpeed<span class="operator">?</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My new car&#x27;s speed :&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(myNewCar.speed) <span class="comment">// Prints 30 still!</span></span><br><span class="line"><span class="built_in">print</span>(myCar.speed) <span class="comment">// Prints 90 !!!</span></span><br></pre></td></tr></table></figure><p>The result is:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">My</span> car&#x27;s speed :</span><br><span class="line"><span class="number">30.0</span></span><br><span class="line"><span class="type">My</span> new car&#x27;s speed :</span><br><span class="line"><span class="number">30.0</span></span><br><span class="line"><span class="type">My</span> car&#x27;s speed :</span><br><span class="line"><span class="number">90.0</span></span><br></pre></td></tr></table></figure><p>But why?<br>Well, the reason is, “myNewCar” is a partial copy of “newCar.” Since closures and their environments cannot be copied completely. The value of “speed” is copied, but the property “increaseSpeed” of “myNewCar” (myNewCar.increaseSpeed?()) holds a reference to the “increaseSpeed” of “myCar” with the “speed” of “myCar” in the captured environment. So, the “increaseSpeed” of “myCar” is invoked.<br>So what do we do now?<br>The straight forward solution is, avoid using closures in value types or we should change the struct to a class. If you have to use them, you should be very careful with it, or else it might lead to unexpected results. Regarding the retain cycle, the only way to break them is to set the variables “myCar” and “myNewCar” to nil manually. It doesn’t sound ideal, but there is no other way. </p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href="https://ohmyswift.com/blog/2020/01/10/why-should-we-avoid-using-closures-in-swift-structs/">Why should we avoid using closures in Swift structs?</a><br>[2] <a href="https://cloud.tencent.com/developer/article/1602230">为什么要避免在结构体中使用闭包？</a>   </p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 03. Structs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> struct </tag>
            
            <tag> closures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03. Property Defaults and Initialization Constructors</title>
      <link href="/2023/03/02/Swift/03.%20Structs/03.%20A%20Case%20of%20Initialization%20Constructor/"/>
      <url>/2023/03/02/Swift/03.%20Structs/03.%20A%20Case%20of%20Initialization%20Constructor/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p>We often use the following methods to initialize in OC.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OCDemoModelBuilder.h</span></span><br><span class="line"><span class="meta">@interface</span> <span class="type">OCDemoModelBuilder</span> : <span class="type">NSObject</span></span><br><span class="line"><span class="meta">@property</span> (nonatomic, copy, nonnull) <span class="type">NSString</span> <span class="operator">*</span>a;</span><br><span class="line"><span class="meta">@property</span> (nonatomic, copy, nonnull) <span class="type">NSString</span> <span class="operator">*</span>b;</span><br><span class="line"><span class="meta">@property</span> (nonatomic, copy, nonnull) <span class="type">NSString</span> <span class="operator">*</span>c;</span><br><span class="line"><span class="meta">@property</span> (nonatomic, copy, nonnull) <span class="type">NSString</span> <span class="operator">*</span>d;</span><br><span class="line"><span class="meta">@property</span> (nonatomic, copy, nonnull) <span class="type">NSString</span> <span class="operator">*</span>e;</span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"><span class="comment">// OCDemoModelBuilder.m</span></span><br><span class="line"><span class="meta">@implementation</span> <span class="type">OCDemoModelBuilder</span></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> (instancetype)<span class="keyword">init</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> <span class="operator">=</span> [<span class="keyword">super</span> <span class="keyword">init</span>]) &#123;</span><br><span class="line">        _a <span class="operator">=</span> @<span class="string">&quot;a&quot;</span>;</span><br><span class="line">        _b <span class="operator">=</span> @<span class="string">&quot;b&quot;</span>;</span><br><span class="line">        _c <span class="operator">=</span> @<span class="string">&quot;c&quot;</span>;</span><br><span class="line">        _d <span class="operator">=</span> @<span class="string">&quot;d&quot;</span>;</span><br><span class="line">        _e <span class="operator">=</span> @<span class="string">&quot;e&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// OCDemoModel.h</span></span><br><span class="line"><span class="meta">@interface</span> <span class="type">OCDemoModel</span> : <span class="type">NSObject</span></span><br><span class="line"><span class="meta">@property</span> (nonatomic, readonly, nonnull) <span class="type">NSString</span> <span class="operator">*</span>a;</span><br><span class="line"><span class="meta">@property</span> (nonatomic, readonly, nonnull) <span class="type">NSString</span> <span class="operator">*</span>b;</span><br><span class="line"><span class="meta">@property</span> (nonatomic, readonly, nonnull) <span class="type">NSString</span> <span class="operator">*</span>c;</span><br><span class="line"><span class="meta">@property</span> (nonatomic, readonly, nonnull) <span class="type">NSString</span> <span class="operator">*</span>d;</span><br><span class="line"><span class="meta">@property</span> (nonatomic, readonly, nonnull) <span class="type">NSString</span> <span class="operator">*</span>e;</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> (instancetype)initWithBuilder:(void(<span class="operator">^</span>)(<span class="type">OCDemoModelBuilder</span> <span class="operator">*</span>builder))builderBlock;</span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// OCDemoModel.m</span></span><br><span class="line"><span class="meta">@implementation</span> <span class="type">OCDemoModel</span></span><br><span class="line"><span class="operator">-</span> (instancetype)initWithBuilder:(void(<span class="operator">^</span>)(<span class="type">OCDemoModelBuilder</span> <span class="operator">*</span>builder))builderBlock &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> <span class="operator">=</span> [<span class="keyword">super</span> <span class="keyword">init</span>]) &#123;</span><br><span class="line">        <span class="type">OCDemoModelBuilder</span> <span class="operator">*</span>builder <span class="operator">=</span> [[<span class="type">OCDemoModelBuilder</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">        <span class="keyword">if</span> (builderBlock) &#123;</span><br><span class="line">            builderBlock(builder);</span><br><span class="line">        &#125;</span><br><span class="line">        _a <span class="operator">=</span> builder.a;</span><br><span class="line">        _b <span class="operator">=</span> builder.b;</span><br><span class="line">        _c <span class="operator">=</span> builder.c;</span><br><span class="line">        _d <span class="operator">=</span> builder.d;</span><br><span class="line">        _e <span class="operator">=</span> builder.e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="type">OCDemoModel</span> <span class="operator">*</span>ret <span class="operator">=</span> [[<span class="type">OCDemoModel</span> alloc] initWithBuilder:<span class="operator">^</span>(<span class="type">OCDemoModelBuilder</span> <span class="operator">*</span> _Nonnull builder) &#123;</span><br><span class="line">    builder.b <span class="operator">=</span> @<span class="string">&quot;b1&quot;</span>;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>However, Swift’s Struct supports attribute default values and initialization constructors, which greatly simplifies the process. The code is as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SwiftDemoModel</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="operator">=</span> <span class="string">&quot;a&quot;</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="operator">=</span> <span class="string">&quot;b&quot;</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="operator">=</span> <span class="string">&quot;c&quot;</span></span><br><span class="line">    <span class="keyword">var</span> d <span class="operator">=</span> <span class="string">&quot;d&quot;</span></span><br><span class="line">    <span class="keyword">var</span> e <span class="operator">=</span> <span class="string">&quot;e&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">let</span> ret <span class="operator">=</span> <span class="type">SwiftDemoModel</span>(b: <span class="string">&quot;b1&quot;</span>)</span><br><span class="line"><span class="comment">// ret = a,b1,c,d,e</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 03. Structs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> struct </tag>
            
            <tag> initialization </tag>
            
            <tag> constructors </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02. Performance Comparison between Structure and Class</title>
      <link href="/2023/03/02/Swift/03.%20Structs/02.%20Performance%20Comparison%20Between%20Structure%20and%20Class/"/>
      <url>/2023/03/02/Swift/03.%20Structs/02.%20Performance%20Comparison%20Between%20Structure%20and%20Class/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p>As we all know that, Since struct instances are allocated on stack, and class instances are allocated on heap, structs can sometimes be drastically faster.<br>So there is an example here can prove that.</p><p>Consider the following example, which demonstrates 2 strategies of wrapping Int data type using struct and class. Using 10 repeated values are to better reflect real world, where you have multiple fields.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 field </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntClass</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">val</span>: <span class="type">Int</span>) &#123; <span class="keyword">self</span>.value <span class="operator">=</span> val &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">IntStruct</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">val</span>: <span class="type">Int</span>) &#123; <span class="keyword">self</span>.value <span class="operator">=</span> val &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">+</span> (<span class="params">x</span>: <span class="type">IntClass</span>, <span class="params">y</span>: <span class="type">IntClass</span>) -&gt; <span class="type">IntClass</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">IntClass</span>(x.value <span class="operator">+</span> y.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">+</span> (<span class="params">x</span>: <span class="type">IntStruct</span>, <span class="params">y</span>: <span class="type">IntStruct</span>) -&gt; <span class="type">IntStruct</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">IntStruct</span>(x.value <span class="operator">+</span> y.value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10 fields</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Int10Class</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">val</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value1 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value2 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value3 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value4 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value5 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value6 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value7 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value8 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value9 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value10 <span class="operator">=</span> val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Int10Struct</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value1, value2, value3, value4, value5, value6, value7, value8, value9, value10: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">val</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value1 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value2 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value3 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value4 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value5 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value6 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value7 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value8 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value9 <span class="operator">=</span> val</span><br><span class="line">        <span class="keyword">self</span>.value10 <span class="operator">=</span> val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">+</span> (<span class="params">x</span>: <span class="type">Int10Struct</span>, <span class="params">y</span>: <span class="type">Int10Struct</span>) -&gt; <span class="type">Int10Struct</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int10Struct</span>(x.value1 <span class="operator">+</span> y.value1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">+</span> (<span class="params">x</span>: <span class="type">Int10Class</span>, <span class="params">y</span>: <span class="type">Int10Class</span>) -&gt; <span class="type">Int10Class</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int10Class</span>(x.value1 <span class="operator">+</span> y.value1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Performance is measured using:<br><strong>Tests.swift</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tests</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">runTests</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Running tests&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        measure(<span class="string">&quot;class (1 field)&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> x <span class="operator">=</span> <span class="type">IntClass</span>(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10000000</span> &#123;</span><br><span class="line">                x <span class="operator">=</span> x <span class="operator">+</span> <span class="type">IntClass</span>(<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        measure(<span class="string">&quot;struct (1 field)&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> x <span class="operator">=</span> <span class="type">IntStruct</span>(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10000000</span> &#123;</span><br><span class="line">                x <span class="operator">=</span> x <span class="operator">+</span> <span class="type">IntStruct</span>(<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        measure(<span class="string">&quot;class (10 fields)&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> x <span class="operator">=</span> <span class="type">Int10Class</span>(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10000000</span> &#123;</span><br><span class="line">                x <span class="operator">=</span> x <span class="operator">+</span> <span class="type">Int10Class</span>(<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        measure(<span class="string">&quot;struct (10 fields)&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> x <span class="operator">=</span> <span class="type">Int10Struct</span>(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10000000</span> &#123;</span><br><span class="line">                x <span class="operator">=</span> x <span class="operator">+</span> <span class="type">Int10Struct</span>(<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">measure</span>(<span class="keyword">_</span> <span class="params">name</span>: <span class="type">String</span>, <span class="params">block</span>: <span class="keyword">@escaping</span> () -&gt; ()) &#123;</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(name)</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> t0 <span class="operator">=</span> <span class="type">CACurrentMediaTime</span>()</span><br><span class="line">        </span><br><span class="line">        block()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> dt <span class="operator">=</span> <span class="type">CACurrentMediaTime</span>() <span class="operator">-</span> t0</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(dt)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can find somewhere in our project and just run the following code:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Tests</span>.runTests()</span><br></pre></td></tr></table></figure><p>One of my running results is as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> (1 <span class="title class_">field</span>)</span><br><span class="line">6.262335019011516</span><br><span class="line"></span><br><span class="line"><span class="title class_">struct</span> (1 <span class="title class_">field</span>)</span><br><span class="line">3.954203129003872</span><br><span class="line"></span><br><span class="line"><span class="title class_">class</span> (10 <span class="title class_">fields</span>)</span><br><span class="line">6.161917756006005</span><br><span class="line"></span><br><span class="line"><span class="title class_">struct</span> (10 <span class="title class_">fields</span>)</span><br><span class="line">4.097320644999854</span><br></pre></td></tr></table></figure><p>We can find that ‘struct’ type is more faster than ‘class’ type.</p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href="https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1">Why Choose Struct Over Class?</a></p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 03. Structs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> struct </tag>
            
            <tag> performance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01. Cases of Structures</title>
      <link href="/2023/03/02/Swift/03.%20Structs/01.%20Cases%20of%20Structures/"/>
      <url>/2023/03/02/Swift/03.%20Structs/01.%20Cases%20of%20Structures/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 2 minutes to finish reading this article.</em></font></p><h4 id="1-Use-structures-when-you’re-modeling-data"><a href="#1-Use-structures-when-you’re-modeling-data" class="headerlink" title=" 1. Use structures when you’re modeling data. "></a><font size=3 color=#4169E1> 1. Use structures when you’re modeling data. </font></h4><p>Use structures when you’re modeling data that contains information about an entity with an identity that you don’t control. For example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PenPalRecord</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> myID: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> myNickname: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> recommendedPenPalID: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myRecord <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">PenPalRecord</span>.<span class="keyword">self</span>, from: jsonResponse)</span><br></pre></td></tr></table></figure><h4 id="2-Use-Structures-and-Protocols-to-Model-Inheritance-and-Share-Behavior"><a href="#2-Use-Structures-and-Protocols-to-Model-Inheritance-and-Share-Behavior" class="headerlink" title=" 2. Use Structures and Protocols to Model Inheritance and Share Behavior. "></a><font size=3 color=#4169E1> 2. Use Structures and Protocols to Model Inheritance and Share Behavior. </font></h4><p>Structures and classes both support a form of inheritance. Structures and protocols can only adopt protocols; they can’t inherit from classes. However, the kinds of inheritance hierarchies you can build with class inheritance can be also modeled using protocol inheritance and structures.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">AnimalCommonProtocol</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>? &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> weight: <span class="type">Double</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Cat</span> : <span class="title class_">AnimalCommonProtocol</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cat run&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">var</span> weight: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> gender: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span> : <span class="title class_">AnimalCommonProtocol</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;dog run&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">var</span> weight: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> type: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 03. Structs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> struct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00. Structures and Classes</title>
      <link href="/2023/03/02/Swift/03.%20Structs/00.%20Structures%20and%20Classes/"/>
      <url>/2023/03/02/Swift/03.%20Structs/00.%20Structures%20and%20Classes/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 5 minutes to finish reading this article.</em></font></p><p>Unlike other programming languages, <strong><em>In Swift, you can define a structure or class in just a single file</em></strong>, and the external interface to that class or structure is automatically made available for other code to use.</p><h4 id="1-Comparing-Structures-and-Classes"><a href="#1-Comparing-Structures-and-Classes" class="headerlink" title=" 1. Comparing Structures and Classes. "></a><font size=3 color=#4169E1> 1. Comparing Structures and Classes. </font></h4><p><font size=2 color=#4169E1>1.1 Differences and similarities.</font><br>Structures and Classes in Swift have many things in common. Both can:</p><blockquote><ol><li>Property, method and initializers can both be defined.  </li><li>Both support protocol and extension.</li></ol></blockquote><p>They have diferent capabilities that:</p><blockquote><ol><li>Class is the reference type; Struct is a value type.</li><li>Class supports inheritance; Struct does not support inheritance.</li><li>The mutating keyword is not required to modify the attribute of the method declared by class; struct needs.</li><li>The class does not provide a default memberwise initializer; Struct provides the default memberwise initializer.</li><li>Class supports reference counting; Struct is not supported.</li><li>Class supports Type casting; Struct is not supported.</li><li>Class supports Deinitializers; Struct is not supported.</li></ol></blockquote><p><font size=2 color=#4169E1>1.2 Identity Operators.</font><br>It can sometimes be useful to find out whether two constants or variables refer to exactly the same instance of a class. To enable this, Swift provides two identity operators:</p><blockquote><p>Identical to (&#x3D;&#x3D;&#x3D;)<br>Not identical to (!&#x3D;&#x3D;)  </p></blockquote><p>Use these operators to check whether two constants or variables refer to the same single instance.</p><p>By default, custom classes and structures don’t have an implementation of the equivalence operators, known as the equal to operator (&#x3D;&#x3D;) and not equal to operator (!&#x3D;). You usually implement the &#x3D;&#x3D; operator, and use the standard library’s default implementation of the !&#x3D; operator that negates the result of the &#x3D;&#x3D; operator. For example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">Vector2D</span>: <span class="title class_">Equatable</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">==</span> (<span class="params">left</span>: <span class="type">Vector2D</span>, <span class="params">right</span>: <span class="type">Vector2D</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (left.x <span class="operator">==</span> right.x) <span class="operator">&amp;&amp;</span> (left.y <span class="operator">==</span> right.y)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="2-Choosing-Between-Structures-and-Classes"><a href="#2-Choosing-Between-Structures-and-Classes" class="headerlink" title=" 2. Choosing Between Structures and Classes. "></a><font size=3 color=#4169E1> 2. Choosing Between Structures and Classes. </font></h4><p>How to select Struct and Class in the project during development？</p><blockquote><ol><li>Choose Structures by Default.</li><li>Use Classes When You Need Objective-C Interoperability.</li><li>Use Classes When You Need to Control Identity.</li><li>Use Structures When You Don’t Control Identity.</li><li>Use Structures and Protocols to Model Inheritance and Share Behavior.</li></ol></blockquote><p>We can make a summary that, do not use class if you can use struct.</p><blockquote><ol><li>When using struct, you do not need to consider memory leaks and multi-threaded’ reads and writes, because it will copy values when passing them.</li><li>Struct is stored in the stack and class is stored in the heap. Struct is more faster.</li></ol></blockquote><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font size=3 color=gray><em>Reference</em></font></h4><p>[1] <a href="https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html">Structures and Classes</a><br>[2] <a href="https://developer.apple.com/documentation/swift/choosing-between-structures-and-classes">Choosing Between Structures and Classes</a><br>[3] <a href="https://stackoverflow.com/questions/24232799/why-choose-struct-over-class?rq=1">Why Choose Struct Over Class?</a></p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 03. Structs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> struct </tag>
            
            <tag> class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00. Three forms of Closures</title>
      <link href="/2023/03/01/Swift/02.%20Closures/00.%20Three%20Forms%20of%20Closures/"/>
      <url>/2023/03/01/Swift/02.%20Closures/00.%20Three%20Forms%20of%20Closures/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p>As the Apple official documents says, closures take one of three forms:</p><h4 id="1-Global-functions"><a href="#1-Global-functions" class="headerlink" title=" 1. Global functions "></a><font size=3 color=#4169E1> 1. Global functions </font></h4><p>Global functions are closures that have a name and don’t capture any values.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">setupBlock</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is a special closure.</p><h4 id="2-Nested-functions"><a href="#2-Nested-functions" class="headerlink" title=" 2. Nested functions "></a><font size=3 color=#4169E1> 2. Nested functions </font></h4><p>Nested functions are closures that have a name and can capture values from their enclosing function. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">makeIncrementer</span>() -&gt; () -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> runningTotal <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">    <span class="comment">// nested function，it is a closure too.</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">incrementer</span>() -&gt; <span class="type">Int</span>&#123;</span><br><span class="line">        runningTotal <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> runningTotal</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> incrementer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Closure-expressions"><a href="#3-Closure-expressions" class="headerlink" title=" 3. Closure expressions "></a><font size=3 color=#4169E1> 3. Closure expressions </font></h4><p>Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; (param) -&gt; <span class="type">ReturnType</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// Method body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:</p><ol><li>Inferring parameter and return value types from context</li><li>Implicit returns from single-expression closures</li><li>Shorthand argument names</li><li>Trailing closure syntax</li></ol><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font size=3 color=gray><em>Reference</em></font></h4><p><a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html">https://docs.swift.org/swift-book/LanguageGuide/Closures.html</a>  </p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 02. Closures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Closures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01. Capturing Values</title>
      <link href="/2023/03/01/Swift/02.%20Closures/01.%20Capturing%20Values/"/>
      <url>/2023/03/01/Swift/02.%20Closures/01.%20Capturing%20Values/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p>The capture of values in Swift’s closure and OC’s Block is different.</p><h4 id="1-The-capture-of-values-in-OC"><a href="#1-The-capture-of-values-in-OC" class="headerlink" title=" 1. The capture of values in OC. "></a><font size=3 color=#4169E1> 1. The capture of values in OC. </font></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSInteger</span> a <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">void(<span class="operator">^</span>block)(void) <span class="operator">=</span> <span class="operator">^</span>&#123;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;block = %ld:&quot;</span>, a);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">a <span class="operator">+=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;out1 = %ld:&quot;</span>, a);</span><br><span class="line">block();</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;out2 = %ld:&quot;</span>, a);</span><br><span class="line"><span class="comment">//result:</span></span><br><span class="line"><span class="number">2021</span><span class="operator">-</span><span class="number">08</span><span class="operator">-</span><span class="number">17</span> <span class="number">11</span>:<span class="number">27</span>:<span class="number">13.846743</span><span class="operator">+</span><span class="number">0800</span> <span class="type">MDProject</span>[<span class="number">30746</span>:<span class="number">23593763</span>] out1 <span class="operator">=</span> <span class="number">101</span></span><br><span class="line"><span class="number">2021</span><span class="operator">-</span><span class="number">08</span><span class="operator">-</span><span class="number">17</span> <span class="number">11</span>:<span class="number">27</span>:<span class="number">13.846885</span><span class="operator">+</span><span class="number">0800</span> <span class="type">MDProject</span>[<span class="number">30746</span>:<span class="number">23593763</span>] block <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="number">2021</span><span class="operator">-</span><span class="number">08</span><span class="operator">-</span><span class="number">17</span> <span class="number">11</span>:<span class="number">27</span>:<span class="number">13.847002</span><span class="operator">+</span><span class="number">0800</span> <span class="type">MDProject</span>[<span class="number">30746</span>:<span class="number">23593763</span>] out2 <span class="operator">=</span> <span class="number">101</span></span><br></pre></td></tr></table></figure><h4 id="2-The-capture-of-values-in-Swift"><a href="#2-The-capture-of-values-in-Swift" class="headerlink" title=" 2. The capture of values in Swift. "></a><font size=3 color=#4169E1> 2. The capture of values in Swift. </font></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> closure <span class="operator">=</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;closure = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">a <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 1 = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">closure()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 2 = <span class="subst">\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out1 <span class="operator">=</span> <span class="number">101</span></span><br><span class="line">closure <span class="operator">=</span> <span class="number">101</span></span><br><span class="line">out <span class="number">2</span> <span class="operator">=</span> <span class="number">101</span></span><br></pre></td></tr></table></figure><p>Swift closures capture “references”, not the objects they reference. We can print the address of variable a to prove this.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="built_in">withUnsafePointer</span>(to: <span class="operator">&amp;</span>a) &#123;ptr <span class="keyword">in</span> <span class="built_in">print</span>(ptr)&#125;</span><br><span class="line"><span class="keyword">let</span> closure <span class="operator">=</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;closure = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">withUnsafePointer</span>(to: <span class="operator">&amp;</span>a) &#123;ptr <span class="keyword">in</span> <span class="built_in">print</span>(ptr)&#125;</span><br><span class="line">&#125;</span><br><span class="line">closure()</span><br><span class="line">a <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 1 = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line"><span class="built_in">withUnsafePointer</span>(to: <span class="operator">&amp;</span>a) &#123;ptr <span class="keyword">in</span> <span class="built_in">print</span>(ptr)&#125;</span><br><span class="line"></span><br><span class="line">closure()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 2 = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line"><span class="built_in">withUnsafePointer</span>(to: <span class="operator">&amp;</span>a) &#123;ptr <span class="keyword">in</span> <span class="built_in">print</span>(ptr)&#125;</span><br></pre></td></tr></table></figure><p>Result as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x0000600000209490</span></span><br><span class="line">closure <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="number">0x0000600000209490</span></span><br><span class="line">out <span class="number">1</span> <span class="operator">=</span> <span class="number">101</span></span><br><span class="line"><span class="number">0x0000600000209490</span></span><br><span class="line">closure <span class="operator">=</span> <span class="number">101</span></span><br><span class="line"><span class="number">0x0000600000209490</span></span><br><span class="line">out <span class="number">2</span> <span class="operator">=</span> <span class="number">101</span></span><br><span class="line"><span class="number">0x0000600000209490</span></span><br></pre></td></tr></table></figure><p>They all have the same address, It proves that closure capture the reference of the variable, not like block in OC.</p><h4 id="3-Modify-value-in-closure"><a href="#3-Modify-value-in-closure" class="headerlink" title=" 3. Modify value in closure. "></a><font size=3 color=#4169E1> 3. Modify value in closure. </font></h4><p>If we want to modity value in block, we should add “__block” or “__weak”, that will make the block capture reference of variable from outside.<br>Let me see how closure handle this case.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> closure <span class="operator">=</span> &#123;</span><br><span class="line">    a <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;closure = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 1 = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">closure()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 2 = <span class="subst">\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out <span class="number">1</span> <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">closure <span class="operator">=</span> <span class="number">101</span></span><br><span class="line">out <span class="number">2</span> <span class="operator">=</span> <span class="number">101</span></span><br></pre></td></tr></table></figure><p>We can modify the value of the variable in closure directly because closure capture the reference of the variable by default.</p><h4 id="4-Capturing-list-in-closure"><a href="#4-Capturing-list-in-closure" class="headerlink" title=" 4. Capturing list in closure. "></a><font size=3 color=#4169E1> 4. Capturing list in closure. </font></h4><p>If we capture variable in capturing list in closure, what will happen? Let me see that.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> closure <span class="operator">=</span> &#123;</span><br><span class="line">    [a] <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;closure = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">a <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 1 = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">closure()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 2 = <span class="subst">\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out <span class="number">1</span> <span class="operator">=</span> <span class="number">101</span></span><br><span class="line">closure <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">out <span class="number">2</span> <span class="operator">=</span> <span class="number">101</span></span><br></pre></td></tr></table></figure><p>At this time if we want to modify ‘a’ in closure:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> closure <span class="operator">=</span> &#123;</span><br><span class="line">    [a] <span class="keyword">in</span></span><br><span class="line">    a <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;closure = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">a <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 1 = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">closure()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 2 = <span class="subst">\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>It will get an error like that:  </p><img src="/assets/Swift/Tips/image00.jpg" class=""><p>And this is a tip for us that variable ‘a’ is an immutable capture now.</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 02. Closures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Capturing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08. Force unwrapping and Implicitly Unwrapped Optionals</title>
      <link href="/2023/02/28/Swift/00.%20Tips/08.%20Implicitly%20Unwrapped%20Optionals%20and%20Force%20unwrapping/"/>
      <url>/2023/02/28/Swift/00.%20Tips/08.%20Implicitly%20Unwrapped%20Optionals%20and%20Force%20unwrapping/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><h4 id="1-Force-unwrapping"><a href="#1-Force-unwrapping" class="headerlink" title=" 1. Force unwrapping "></a><font size=3 color=#4169E1> 1. Force unwrapping </font></h4><p>Forced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> possibleString: <span class="type">String</span>? <span class="operator">=</span> <span class="string">&quot;An optional string.&quot;</span></span><br><span class="line"><span class="keyword">let</span> forcedString: <span class="type">String</span> <span class="operator">=</span> possibleString<span class="operator">!</span> <span class="comment">// Need exclamation mark to get value</span></span><br></pre></td></tr></table></figure><h4 id="2-Implicitly-Unwrapped-Optionals"><a href="#2-Implicitly-Unwrapped-Optionals" class="headerlink" title=" 2. Implicitly Unwrapped Optionals "></a><font size=3 color=#4169E1> 2. Implicitly Unwrapped Optionals </font></h4><p>An implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> assumedString2: <span class="type">String</span>! <span class="operator">=</span> <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">let</span> possibleString2: <span class="type">String</span>? <span class="operator">=</span> assumedString2</span><br><span class="line"><span class="keyword">let</span> implicitString2: <span class="type">String</span> <span class="operator">=</span> assumedString2  <span class="comment">//No exclamation point needed</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> assumedString1: <span class="type">String</span>! <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> possibleString1: <span class="type">String</span>? <span class="operator">=</span> assumedString1</span><br><span class="line"><span class="keyword">let</span> implicitString1: <span class="type">String</span> <span class="operator">=</span> assumedString1  <span class="comment">// Report Error</span></span><br></pre></td></tr></table></figure><p>So, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.<br>We can do these as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> assumedString <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(assumedString<span class="operator">!</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure><p>You can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> definiteString <span class="operator">=</span> assumedString &#123;</span><br><span class="line">    <span class="built_in">print</span>(definiteString)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00. Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> force unwrapping </tag>
            
            <tag> Implicitly Unwrapped </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07. How to print the memory address of a variable?</title>
      <link href="/2023/02/28/Swift/00.%20Tips/07.%20How%20to%20print%20the%20memory%20address%20of%20a%20variable?/"/>
      <url>/2023/02/28/Swift/00.%20Tips/07.%20How%20to%20print%20the%20memory%20address%20of%20a%20variable?/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p>We can print the memory address of a variable like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="built_in">withUnsafePointer</span>(to: <span class="operator">&amp;</span>a) &#123;ptr <span class="keyword">in</span> <span class="built_in">print</span>(ptr)&#125;</span><br><span class="line"><span class="comment">//result: 0x00007ff7bfeff210</span></span><br></pre></td></tr></table></figure><p>Or using the following method is OK:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">printPointer</span>&lt;<span class="type">T</span>&gt;(<span class="params">ptr</span>: <span class="type">UnsafePointer</span>&lt;<span class="type">T</span>&gt;) &#123;</span><br><span class="line">    <span class="built_in">print</span>(ptr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">printPointer(ptr: <span class="operator">&amp;</span>a)</span><br><span class="line"><span class="comment">//result: 0x00007ff7bfeff220</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00. Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> memory address </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06. How to Define a singleton?</title>
      <link href="/2023/02/28/Swift/00.%20Tips/06.%20How%20to%20Define%20a%20singleton?/"/>
      <url>/2023/02/28/Swift/00.%20Tips/06.%20How%20to%20Define%20a%20singleton?/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p>We can define a singleton in OC like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span> (instancetype) sharedManager &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="operator">*</span>obj <span class="operator">=</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(<span class="operator">&amp;</span>onceToken, <span class="operator">^</span>&#123;</span><br><span class="line">        obj <span class="operator">=</span> [[<span class="type">Object</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. ‘Let’ is a simpler way to ensure thread safety. So the final code is as follows：</p><p><strong> Example Code</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SingleOne</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">SingleOne</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> first: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> second: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color=gray size=3 ><em>Reference</em></font></strong> <a href="https://blog.csdn.net/LiqunZhang/article/details/115127156">https://blog.csdn.net/LiqunZhang/article/details/115127156</a></p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00. Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> singleton </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05. Computed properties and Stored properties</title>
      <link href="/2023/02/28/Swift/00.%20Tips/05.%20Computed%20properties%20and%20Stored%20properties/"/>
      <url>/2023/02/28/Swift/00.%20Tips/05.%20Computed%20properties%20and%20Stored%20properties/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p><strong> Example Code </strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arr1</span></span><br><span class="line"><span class="keyword">var</span> arr1:[<span class="type">Int</span>] <span class="operator">=</span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//arr2</span></span><br><span class="line"><span class="keyword">var</span> arr2:[<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//arr3</span></span><br><span class="line"><span class="keyword">var</span> arr3:[<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//arr4</span></span><br><span class="line"><span class="keyword">var</span> arr4:[<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>arr1 declares a Stored-Property assigned value through a closure operation.<br>arr2 declares a read-only Computed-Property.<br>arr3 declares a read-only Computed-Property too.<br>arr4 declares a read-write Computed-Property too.</p></blockquote><p>It can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.</p><blockquote><p>Note:</p><ol><li>Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    </li><li>The Stored-Properties can be defined with the keyword ‘var’ or the keyword let’. The Computed-Property can only be defined with the keyword ‘var’.   </li><li>Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.</li></ol></blockquote><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><font size=3 color=gray><em>Reference</em></font></h4><p><a href="https://cloud.tencent.com/developer/article/1610855">https://cloud.tencent.com/developer/article/1610855</a>  </p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00. Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computed </tag>
            
            <tag> stored </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04. Set Read-only permission of the property</title>
      <link href="/2023/02/28/Swift/00.%20Tips/04.%20Set%20Read-only%20permission%20of%20the%20property/"/>
      <url>/2023/02/28/Swift/00.%20Tips/04.%20Set%20Read-only%20permission%20of%20the%20property/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p>In Swift, there is no keyword “readonly” like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private(set)</span> <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>External access is normal:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = ClassA()</span><br><span class="line">print(a.title)</span><br></pre></td></tr></table></figure><p>But the following is wrong:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.title = &quot;1234&quot;</span><br></pre></td></tr></table></figure><p>The following errors will be reported:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot assign to property: &#x27;title&#x27; setter is inaccessible</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00. Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read-only </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03. NSString and String</title>
      <link href="/2023/02/28/Swift/00.%20Tips/03.%20NSString%20and%20String/"/>
      <url>/2023/02/28/Swift/00.%20Tips/03.%20NSString%20and%20String/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><h4 id="1-Mutual-Transformation"><a href="#1-Mutual-Transformation" class="headerlink" title=" 1. Mutual Transformation "></a><font size=3 color=#4169E1> 1. Mutual Transformation </font></h4><p>NSString and String can transform to each other.<br><strong> Example Code </strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">StringToNSString</span>()  &#123;</span><br><span class="line">    <span class="keyword">let</span> a <span class="operator">=</span> <span class="type">String</span>(<span class="string">&quot;1234567890&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> b <span class="operator">=</span> a <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line">    <span class="built_in">print</span>(b.integerValue)</span><br><span class="line">    <span class="built_in">print</span>(b.length)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">NSStringToString</span>()  &#123;</span><br><span class="line">    <span class="keyword">let</span> a : <span class="type">NSString</span> <span class="operator">=</span> <span class="string">&quot;1234567890&quot;</span></span><br><span class="line">    <span class="keyword">let</span> b <span class="operator">=</span> a <span class="keyword">as</span> <span class="type">String</span></span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Differences-between-NSString-and-String"><a href="#2-Differences-between-NSString-and-String" class="headerlink" title=" 2. Differences between NSString and String "></a><font size=3 color=#4169E1> 2. Differences between NSString and String </font></h4><p>NSString is a subclass of NSObject and that is to say, it is a class that is a reference type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">NSString</span> : <span class="title class_">NSObject</span>, <span class="title class_">NSCopying</span>, <span class="title class_">NSMutableCopying</span>, <span class="title class_">NSSecureCoding</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> length: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>However, String is a value type which is a kind of struct.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@frozen</span> <span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">String</span> &#123;  </span><br><span class="line">    <span class="keyword">@inlinable</span> <span class="keyword">public</span> <span class="keyword">init</span>()</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>They have some identical APIs, but they also have their own independent APIs.  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="type">String</span>()</span><br><span class="line">str <span class="operator">=</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>();</span><br><span class="line">nsStr <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>1.1 Similar or Identical APIs</strong></p><details><summary>Sample Code</summary><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. Get the number of characters in the string</span></span><br><span class="line"><span class="built_in">print</span>(str.count);   <span class="comment">//6</span></span><br><span class="line"><span class="built_in">print</span>(nsStr.length);   <span class="comment">//6</span></span><br><span class="line"><span class="comment">//2. Prefix/Suffix Operations</span></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">str.hasPrefix(<span class="string">&quot;12&quot;</span>) <span class="comment">//true</span></span><br><span class="line">str.hasSuffix(<span class="string">&quot;56&quot;</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">nsStr.hasPrefix(<span class="string">&quot;12&quot;</span>)   <span class="comment">//true</span></span><br><span class="line">nsStr.hasSuffix(<span class="string">&quot;56&quot;</span>)   <span class="comment">//true</span></span><br><span class="line"><span class="comment">//3. Prefix/Suffix Operations</span></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;123456-11&quot;</span>;</span><br><span class="line">str.components(separatedBy: <span class="string">&quot;-&quot;</span>);   <span class="comment">//[&quot;123456&quot;, &quot;11&quot;]</span></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;123456-22&quot;</span>);</span><br><span class="line">nsStr.components(separatedBy: <span class="string">&quot;-&quot;</span>); <span class="comment">//[&quot;123456&quot;, &quot;22&quot;]</span></span><br><span class="line"><span class="comment">//4. Letter case conversion ops for uppercased/lowercased/capitalized</span></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(str.uppercased());    <span class="comment">//ABC</span></span><br><span class="line"><span class="built_in">print</span>(str.lowercased());    <span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;cba&quot;</span>);</span><br><span class="line"><span class="built_in">print</span>(nsStr.uppercased);    <span class="comment">//CBA</span></span><br><span class="line"><span class="built_in">print</span>(nsStr.lowercased);    <span class="comment">//cba</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(str.capitalized);    <span class="comment">//Abc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;cba&quot;</span>);</span><br><span class="line"><span class="built_in">print</span>(nsStr.capitalized);    <span class="comment">//Cba</span></span><br><span class="line"><span class="comment">//5. Strip specific strings ops for trimmingCharacters</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;<span class="subst">\r</span> abc &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> strTrimed <span class="operator">=</span> str.trimmingCharacters(in: .whitespacesAndNewlines)</span><br><span class="line"><span class="built_in">print</span>(strTrimed);   <span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;<span class="subst">\r</span> cba &quot;</span>);</span><br><span class="line"><span class="keyword">let</span> nsStrTrimed <span class="operator">=</span> nsStr.trimmingCharacters(in: .whitespacesAndNewlines);</span><br><span class="line"><span class="built_in">print</span>(nsStrTrimed); <span class="comment">//cba</span></span><br><span class="line"><span class="comment">//6. Character substitution ops for replacingOccurrences:of:with</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;hello String&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str1 <span class="operator">=</span> str.replacingOccurrences(of: <span class="string">&quot;String&quot;</span>, with: <span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str1) <span class="comment">//&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral:<span class="string">&quot;hello NSString&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> nsStr1 <span class="operator">=</span> nsStr.replacingOccurrences(of: <span class="string">&quot;NSString&quot;</span>, with: <span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(nsStr1)   <span class="comment">//&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7. Convert decimal hexadecimal octal data to string</span></span><br><span class="line"><span class="keyword">let</span> hexStr <span class="operator">=</span> <span class="type">String</span>().appendingFormat(<span class="string">&quot;%x&quot;</span>,<span class="number">16</span>)<span class="comment">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class="line"><span class="keyword">let</span> oStr <span class="operator">=</span> <span class="type">String</span>().appendingFormat(<span class="string">&quot;%o&quot;</span>,<span class="number">16</span>)<span class="comment">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class="line"><span class="keyword">let</span> dStr <span class="operator">=</span> <span class="type">String</span>().appendingFormat(<span class="string">&quot;%d&quot;</span>,<span class="number">0x10</span>)<span class="comment">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class="line"><span class="keyword">let</span> dStr1 <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%d&quot;</span>, <span class="number">0o10</span>)<span class="comment">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hexNSStr <span class="operator">=</span> <span class="type">NSString</span>().appendingFormat(<span class="string">&quot;%x&quot;</span>, <span class="number">16</span>)<span class="comment">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class="line"><span class="keyword">let</span> oNSStr <span class="operator">=</span> <span class="type">NSString</span>().appendingFormat(<span class="string">&quot;%o&quot;</span>,<span class="number">16</span>)<span class="comment">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class="line"><span class="keyword">let</span> dNSStr <span class="operator">=</span> <span class="type">NSString</span>().appendingFormat(<span class="string">&quot;%d&quot;</span>,<span class="number">0x10</span>)<span class="comment">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class="line"><span class="keyword">let</span> dNSStr1 <span class="operator">=</span> <span class="type">NSString</span>(format: <span class="string">&quot;%d&quot;</span>, <span class="number">0o10</span>)<span class="comment">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure></details><p><strong>1.2 Independent APIs</strong><br>1.2.1 Independent APIs of String    </p><details><summary>Sample Code</summary><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. isEmpty</span></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="type">String</span>();</span><br><span class="line">str <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(str.isEmpty);</span><br><span class="line"><span class="comment">//2. sorted()</span></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;215423&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(str.sorted()); <span class="comment">//[&quot;1&quot;, &quot;2&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. filter()</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;12 34 56&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> filter <span class="operator">=</span> str.filter &#123; (char) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    char <span class="operator">!=</span> <span class="string">&quot; &quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">print</span>(filter);<span class="comment">//123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. enumerated()</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> str.enumerated() &#123;</span><br><span class="line">    <span class="built_in">print</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>1.2.2 Independent APIs of NSString</p><details><summary>Sample Code</summary><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. initialize methods</span></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>.<span class="keyword">init</span>(string: <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. boolValue</span></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="built_in">print</span>(nsStr.boolValue);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. isEqual()</span></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="built_in">print</span>(nsStr.isEqual(to: <span class="string">&quot;123456&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Numeric Ops</span></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;123456&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(nsStr.intValue);</span><br><span class="line"><span class="built_in">print</span>(nsStr.floatValue);</span><br><span class="line"><span class="built_in">print</span>(nsStr.doubleValue);</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00. Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nsstring </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02. Lazy loading and Anonymous function</title>
      <link href="/2023/02/28/Swift/00.%20Tips/02.%20Lazy%20loading%20and%20Anonymous%20function/"/>
      <url>/2023/02/28/Swift/00.%20Tips/02.%20Lazy%20loading%20and%20Anonymous%20function/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p>In Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lazy</span> <span class="keyword">var</span> str: <span class="type">String</span> <span class="operator">=</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Only access the output for the first time&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>This style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">//anonymous function code</span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>We can try to print the type of this type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">TestCase</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a: () <span class="operator">=</span> &#123;&#125;()</span><br><span class="line">    <span class="keyword">let</span> b <span class="operator">=</span> test</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(of: a))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(of: b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">()</span><br><span class="line">() -&gt; ()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00. Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lazy </tag>
            
            <tag> anonymous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01. Handling of errors and exceptions</title>
      <link href="/2023/02/28/Swift/00.%20Tips/01.%20Handling%20of%20errors%20and%20exceptions/"/>
      <url>/2023/02/28/Swift/00.%20Tips/01.%20Handling%20of%20errors%20and%20exceptions/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><h4 id="1-Handlings-of-Objective-C"><a href="#1-Handlings-of-Objective-C" class="headerlink" title=" 1. Handlings of Objective-C "></a><font size=3 color=#4169E1> 1. Handlings of Objective-C </font></h4><p>In Objective-C, we often write code like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSError</span> <span class="operator">*</span>error;</span><br><span class="line"><span class="type">BOOL</span> success <span class="operator">=</span> [data writeToFile: path options: options error: <span class="operator">&amp;</span>error];</span><br><span class="line"><span class="keyword">if</span>(error) &#123;</span><br><span class="line"><span class="comment">// something happens</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That is a very good method to handle possible errors. However we often simply this code like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[data writeToFile: path options: options error: <span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>We set varaible error to nil, Maybe we don’t care about this error when we are developing. However this method can report errors. For example, if the space of the device’s disk is full, you will write unsuccessfully, and this error can’t not be found easily becase of our laziness.</p><h4 id="2-Handlings-of-Swift"><a href="#2-Handlings-of-Swift" class="headerlink" title=" 2. Handlings of Swift "></a><font size=3 color=#4169E1> 2. Handlings of Swift </font></h4><p>In Swift, we don’t need to write an pointer variable error that waiting to be written by called method. we can use ‘try catch’ to take place of it. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> d.write(toFile: <span class="string">&quot;Hello&quot;</span>, options: [])</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</span><br><span class="line">    print (<span class="string">&quot;Error: <span class="subst">\(error.domain)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is a very common to use ‘try catch’ to hand errors and exceptions in Swift. The sample code is as follows.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">LoginError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">UserNotFound</span>, <span class="type">UserPasswordNotMatch</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">login</span>(<span class="params">user</span>: <span class="type">String</span>, <span class="params">password</span>: <span class="type">String</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="operator">!</span>users.keys.contains(user) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">LoginError</span>.<span class="type">UserNotFound</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> users[user] <span class="operator">!=</span> password &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">LoginError</span>.<span class="type">UserPasswordNotMatch</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Login successfully.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// call</span></span><br><span class="line"><span class="keyword">let</span> users:[<span class="type">String</span>:<span class="type">String</span>] <span class="operator">=</span> [<span class="string">&quot;liudehua&quot;</span>:<span class="string">&quot;One&quot;</span>, <span class="string">&quot;wanggang&quot;</span>:<span class="string">&quot;Two&quot;</span>, <span class="string">&quot;liming&quot;</span>:<span class="string">&quot;Three&quot;</span>]</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> login(user: <span class="string">&quot;ll&quot;</span>, password: <span class="string">&quot;234&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="type">LoginError</span>.<span class="type">UserNotFound</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;UserNotFound&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="type">LoginError</span>.<span class="type">UserPasswordNotMatch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;UserPasswordNotMatch&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="comment">//default handling, don&#x27;t delete it, or it would report an error.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00. Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> errors </tag>
            
            <tag> exceptions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00. Generation of random numbers</title>
      <link href="/2023/02/28/Swift/00.%20Tips/00.%20Generation%20of%20random%20numbers/"/>
      <url>/2023/02/28/Swift/00.%20Tips/00.%20Generation%20of%20random%20numbers/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p>In Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:</p><blockquote><p>Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> faceCount <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">let</span> randomResult <span class="operator">=</span> <span class="type">Int</span>(arc4random()) <span class="operator">%</span> faceCount <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(randomResult)</span><br></pre></td></tr></table></figure><p>The above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">arc4random_uniform</span>(<span class="keyword">_</span>: <span class="type">UInt32</span>) -&gt; <span class="type">UInt32</span></span><br></pre></td></tr></table></figure><p>It accepts a UInt32 type number as input, and reduces the result to 0 to n-1.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> faceCount: <span class="type">UInt32</span> <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">let</span> randomResult <span class="operator">=</span> <span class="type">Int</span>(arc4random_uniform(faceCount)) <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(randomResult)</span><br></pre></td></tr></table></figure><p>The following is a best practice based on Range:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">random</span>(<span class="params">in</span> <span class="params">range</span>: <span class="type">Range</span>&lt;<span class="type">Int</span>&gt;) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count <span class="operator">=</span> <span class="type">UInt32</span>(range.endIndex <span class="operator">-</span> range.startIndex)</span><br><span class="line">    <span class="keyword">return</span>  <span class="type">Int</span>(arc4random_uniform(count)) <span class="operator">+</span> range.startIndex</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">100</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> range <span class="operator">=</span> <span class="type">Range</span>&lt;<span class="type">Int</span>&gt;(<span class="number">1</span><span class="operator">...</span><span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(random(in: range))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00. Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> random </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
