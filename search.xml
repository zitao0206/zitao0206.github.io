<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>00. Three forms of Closures</title>
      <link href="/2023/03/01/Swift/02.%20Closures/00.%20Three%20Forms%20of%20Closures/"/>
      <url>/2023/03/01/Swift/02.%20Closures/00.%20Three%20Forms%20of%20Closures/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p>As the Apple official documents says, closures take one of three forms:</p><h3 id="1-Global-functions"><a href="#1-Global-functions" class="headerlink" title="1. Global functions"></a><font size=3 color=#4169E1><strong>1. Global functions</strong></font></h3><p>Global functions are closures that have a name and don’t capture any values.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">setupBlock</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is a special closure.</p><h3 id="2-Nested-functions"><a href="#2-Nested-functions" class="headerlink" title="2. Nested functions"></a><font size=3 color=#4169E1><strong>2. Nested functions</strong></font></h3><p>Nested functions are closures that have a name and can capture values from their enclosing function. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">makeIncrementer</span>() -&gt; () -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> runningTotal <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">    <span class="comment">// nested function，it is a closure too.</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">incrementer</span>() -&gt; <span class="type">Int</span>&#123;</span><br><span class="line">        runningTotal <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> runningTotal</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> incrementer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Closure-expressions"><a href="#3-Closure-expressions" class="headerlink" title="3. Closure expressions"></a><font size=3 color=#4169E1><strong>3. Closure expressions</strong></font></h3><p>Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; (param) -&gt; <span class="type">ReturnType</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// Method body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include:</p><ol><li>Inferring parameter and return value types from context</li><li>Implicit returns from single-expression closures</li><li>Shorthand argument names</li><li>Trailing closure syntax</li></ol><h2 id="Reference-Documents"><a href="#Reference-Documents" class="headerlink" title="Reference Documents"></a><strong><font color=gray size=3 ><em>Reference Documents</em></font></strong></h2><p><a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html">https://docs.swift.org/swift-book/LanguageGuide/Closures.html</a>  </p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 02. Closures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Closures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01. Capturing Values</title>
      <link href="/2023/03/01/Swift/02.%20Closures/01.%20Capturing%20Values/"/>
      <url>/2023/03/01/Swift/02.%20Closures/01.%20Capturing%20Values/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p>The capture of values in Swift’s closure and OC’s Block is different.</p><h3 id="1-The-capture-of-values-in-OC"><a href="#1-The-capture-of-values-in-OC" class="headerlink" title="1. The capture of values in OC."></a><font size=3 color=#4169E1><strong>1. The capture of values in OC.</strong></font></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSInteger</span> a <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">void(<span class="operator">^</span>block)(void) <span class="operator">=</span> <span class="operator">^</span>&#123;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">&quot;block = %ld:&quot;</span>, a);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">a <span class="operator">+=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;out1 = %ld:&quot;</span>, a);</span><br><span class="line">block();</span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">&quot;out2 = %ld:&quot;</span>, a);</span><br><span class="line"><span class="comment">//result:</span></span><br><span class="line"><span class="number">2021</span><span class="operator">-</span><span class="number">08</span><span class="operator">-</span><span class="number">17</span> <span class="number">11</span>:<span class="number">27</span>:<span class="number">13.846743</span><span class="operator">+</span><span class="number">0800</span> <span class="type">MDProject</span>[<span class="number">30746</span>:<span class="number">23593763</span>] out1 <span class="operator">=</span> <span class="number">101</span></span><br><span class="line"><span class="number">2021</span><span class="operator">-</span><span class="number">08</span><span class="operator">-</span><span class="number">17</span> <span class="number">11</span>:<span class="number">27</span>:<span class="number">13.846885</span><span class="operator">+</span><span class="number">0800</span> <span class="type">MDProject</span>[<span class="number">30746</span>:<span class="number">23593763</span>] block <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="number">2021</span><span class="operator">-</span><span class="number">08</span><span class="operator">-</span><span class="number">17</span> <span class="number">11</span>:<span class="number">27</span>:<span class="number">13.847002</span><span class="operator">+</span><span class="number">0800</span> <span class="type">MDProject</span>[<span class="number">30746</span>:<span class="number">23593763</span>] out2 <span class="operator">=</span> <span class="number">101</span></span><br></pre></td></tr></table></figure><h3 id="2-The-capture-of-values-in-Swift"><a href="#2-The-capture-of-values-in-Swift" class="headerlink" title="2. The capture of values in Swift."></a><font size=3 color=#4169E1><strong>2. The capture of values in Swift.</strong></font></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> closure <span class="operator">=</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;closure = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">a <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 1 = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">closure()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 2 = <span class="subst">\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out1 <span class="operator">=</span> <span class="number">101</span></span><br><span class="line">closure <span class="operator">=</span> <span class="number">101</span></span><br><span class="line">out <span class="number">2</span> <span class="operator">=</span> <span class="number">101</span></span><br></pre></td></tr></table></figure><p>Swift closures capture “references”, not the objects they reference. We can print the address of variable a to prove this.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="built_in">withUnsafePointer</span>(to: <span class="operator">&amp;</span>a) &#123;ptr <span class="keyword">in</span> <span class="built_in">print</span>(ptr)&#125;</span><br><span class="line"><span class="keyword">let</span> closure <span class="operator">=</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;closure = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">withUnsafePointer</span>(to: <span class="operator">&amp;</span>a) &#123;ptr <span class="keyword">in</span> <span class="built_in">print</span>(ptr)&#125;</span><br><span class="line">&#125;</span><br><span class="line">closure()</span><br><span class="line">a <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 1 = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line"><span class="built_in">withUnsafePointer</span>(to: <span class="operator">&amp;</span>a) &#123;ptr <span class="keyword">in</span> <span class="built_in">print</span>(ptr)&#125;</span><br><span class="line"></span><br><span class="line">closure()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 2 = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line"><span class="built_in">withUnsafePointer</span>(to: <span class="operator">&amp;</span>a) &#123;ptr <span class="keyword">in</span> <span class="built_in">print</span>(ptr)&#125;</span><br></pre></td></tr></table></figure><p>Result as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x0000600000209490</span></span><br><span class="line">closure <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="number">0x0000600000209490</span></span><br><span class="line">out <span class="number">1</span> <span class="operator">=</span> <span class="number">101</span></span><br><span class="line"><span class="number">0x0000600000209490</span></span><br><span class="line">closure <span class="operator">=</span> <span class="number">101</span></span><br><span class="line"><span class="number">0x0000600000209490</span></span><br><span class="line">out <span class="number">2</span> <span class="operator">=</span> <span class="number">101</span></span><br><span class="line"><span class="number">0x0000600000209490</span></span><br></pre></td></tr></table></figure><p>They all have the same address, It proves that closure capture the reference of the variable, not like block in OC.</p><h3 id="3-Modify-value-in-closure"><a href="#3-Modify-value-in-closure" class="headerlink" title="3. Modify value in closure."></a><font size=3 color=#4169E1><strong>3. Modify value in closure.</strong></font></h3><p>If we want to modity value in block, we should add “__block” or “__weak”, that will make the block capture reference of variable from outside.<br>Let me see how closure handle this case.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> closure <span class="operator">=</span> &#123;</span><br><span class="line">    a <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;closure = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 1 = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">closure()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 2 = <span class="subst">\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out <span class="number">1</span> <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">closure <span class="operator">=</span> <span class="number">101</span></span><br><span class="line">out <span class="number">2</span> <span class="operator">=</span> <span class="number">101</span></span><br></pre></td></tr></table></figure><p>We can modify the value of the variable in closure directly because closure capture the reference of the variable by default.</p><h3 id="4-Capturing-list-in-closure"><a href="#4-Capturing-list-in-closure" class="headerlink" title="4. Capturing list in closure."></a><font size=3 color=#4169E1><strong>4. Capturing list in closure.</strong></font></h3><p>If we capture variable in capturing list in closure, what will happen? Let me see that.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> closure <span class="operator">=</span> &#123;</span><br><span class="line">    [a] <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;closure = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">a <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 1 = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">closure()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 2 = <span class="subst">\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out <span class="number">1</span> <span class="operator">=</span> <span class="number">101</span></span><br><span class="line">closure <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">out <span class="number">2</span> <span class="operator">=</span> <span class="number">101</span></span><br></pre></td></tr></table></figure><p>At this time if we want to modify ‘a’ in closure:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">let</span> closure <span class="operator">=</span> &#123;</span><br><span class="line">    [a] <span class="keyword">in</span></span><br><span class="line">    a <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;closure = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">a <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 1 = <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">closure()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out 2 = <span class="subst">\(a)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>It will get an error like that:  </p><img src="/assets/Swift/Tips/image00.jpg" class=""><p>And this is a tip for us that variable ‘a’ is an immutable capture now.</p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 02. Closures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Capturing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08. Force unwrapping and Implicitly Unwrapped Optionals</title>
      <link href="/2023/02/28/Swift/00.%20Tips/08.%20Implicitly%20Unwrapped%20Optionals%20and%20Force%20unwrapping/"/>
      <url>/2023/02/28/Swift/00.%20Tips/08.%20Implicitly%20Unwrapped%20Optionals%20and%20Force%20unwrapping/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><h2 id="1-Force-unwrapping"><a href="#1-Force-unwrapping" class="headerlink" title="1. Force unwrapping "></a><strong><font size=4>1. Force unwrapping </font></strong></h2><p>Forced unwrapping of optional types means that when we are sure that an optional type must have a value, we can use the exclamation mark ! to force parsing of it and thus get the value in it. If we use forced parsing on an optional type that has no value, a runtime error will be triggered. Therefore, when using forced parsing, we must make sure that the optional type does have a value.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> possibleString: <span class="type">String</span>? <span class="operator">=</span> <span class="string">&quot;An optional string.&quot;</span></span><br><span class="line"><span class="keyword">let</span> forcedString: <span class="type">String</span> <span class="operator">=</span> possibleString<span class="operator">!</span> <span class="comment">// Need exclamation mark to get value</span></span><br></pre></td></tr></table></figure><h2 id="2-Implicitly-Unwrapped-Optionals"><a href="#2-Implicitly-Unwrapped-Optionals" class="headerlink" title="2. Implicitly Unwrapped Optionals "></a><strong><font size=4>2. Implicitly Unwrapped Optionals </font></strong></h2><p>An implicitly Unwrapped Optionals type is a special kind of optional type that is declared with the exclamation mark ! flag to indicate that this optional type can be implicitly treated as a non-optional type for subsequent use, without the need to force resolution each time. At declaration time, we can declare an optional type as an implicitly resolved optional type, which will throw an error at runtime if the variable or constant is not initialized to a non-nil value at the time of use.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> assumedString2: <span class="type">String</span>! <span class="operator">=</span> <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">let</span> possibleString2: <span class="type">String</span>? <span class="operator">=</span> assumedString2</span><br><span class="line"><span class="keyword">let</span> implicitString2: <span class="type">String</span> <span class="operator">=</span> assumedString2  <span class="comment">//No exclamation point needed</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> assumedString1: <span class="type">String</span>! <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> possibleString1: <span class="type">String</span>? <span class="operator">=</span> assumedString1</span><br><span class="line"><span class="keyword">let</span> implicitString1: <span class="type">String</span> <span class="operator">=</span> assumedString1  <span class="comment">// Report Error</span></span><br></pre></td></tr></table></figure><p>So, implicitly unwrapped optionals type is special optionals type that can be used to get the value in it directly using the variable name, without having to force unwrapping every time.<br>We can do these as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> assumedString <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(assumedString<span class="operator">!</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure><p>You can also use an implicitly unwrapped optional with optional binding, to check and unwrap its value in a single statement:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> definiteString <span class="operator">=</span> assumedString &#123;</span><br><span class="line">    <span class="built_in">print</span>(definiteString)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Prints &quot;An implicitly unwrapped optional string.&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00.Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Force unwrapping </tag>
            
            <tag> Implicitly Unwrapped </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07. How to print the memory address of a variable?</title>
      <link href="/2023/02/28/Swift/00.%20Tips/07.%20How%20to%20print%20the%20memory%20address%20of%20a%20variable?/"/>
      <url>/2023/02/28/Swift/00.%20Tips/07.%20How%20to%20print%20the%20memory%20address%20of%20a%20variable?/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p>We can print the memory address of a variable like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line"><span class="built_in">withUnsafePointer</span>(to: <span class="operator">&amp;</span>a) &#123;ptr <span class="keyword">in</span> <span class="built_in">print</span>(ptr)&#125;</span><br><span class="line"><span class="comment">//result: 0x00007ff7bfeff210</span></span><br></pre></td></tr></table></figure><p>Or using the following method is OK:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">printPointer</span>&lt;<span class="type">T</span>&gt;(<span class="params">ptr</span>: <span class="type">UnsafePointer</span>&lt;<span class="type">T</span>&gt;) &#123;</span><br><span class="line">    <span class="built_in">print</span>(ptr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">printPointer(ptr: <span class="operator">&amp;</span>a)</span><br><span class="line"><span class="comment">//result: 0x00007ff7bfeff220</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00.Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> memory address </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06. How to Define a singleton?</title>
      <link href="/2023/02/28/Swift/00.%20Tips/06.%20How%20to%20Define%20a%20singleton?/"/>
      <url>/2023/02/28/Swift/00.%20Tips/06.%20How%20to%20Define%20a%20singleton?/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p>We can define a singleton in OC like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span> (instancetype) sharedManager &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="operator">*</span>obj <span class="operator">=</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(<span class="operator">&amp;</span>onceToken, <span class="operator">^</span>&#123;</span><br><span class="line">        obj <span class="operator">=</span> [[<span class="type">Object</span> alloc] <span class="keyword">init</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use dispatch_once_t in GCD can ensure that the code in it is called only once, so as to ensure the safety of the singleton on the thread. However, since the original Dispatch once method is abandoned in Swift, dispatch_once_t cannot be used to create a singleton. ‘Let’ is a simpler way to ensure thread safety. So the final code is as follows：</p><p><strong> Example Code</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SingleOne</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">SingleOne</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> first: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> second: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference-Documents"><a href="#Reference-Documents" class="headerlink" title="Reference Documents"></a><strong><font color=gray size=3 ><em>Reference Documents</em></font></strong></h2><p> <a href="https://blog.csdn.net/LiqunZhang/article/details/115127156">https://blog.csdn.net/LiqunZhang/article/details/115127156</a></p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00.Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> singleton </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05. Computed properties and Stored properties</title>
      <link href="/2023/02/28/Swift/00.%20Tips/05.%20Computed%20properties%20and%20Stored%20properties/"/>
      <url>/2023/02/28/Swift/00.%20Tips/05.%20Computed%20properties%20and%20Stored%20properties/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p><strong> Example Code </strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arr1</span></span><br><span class="line"><span class="keyword">var</span> arr1:[<span class="type">Int</span>] <span class="operator">=</span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//arr2</span></span><br><span class="line"><span class="keyword">var</span> arr2:[<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//arr3</span></span><br><span class="line"><span class="keyword">var</span> arr3:[<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//arr4</span></span><br><span class="line"><span class="keyword">var</span> arr4:[<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>arr1 declares a Stored-Property assigned value through a closure operation.<br>arr2 declares a read-only Computed-Property.<br>arr3 declares a read-only Computed-Property too.<br>arr4 declares a read-write Computed-Property too.</p></blockquote><p>It can be seen that the Stored-Property can be directly read and written. The Computed-Property cannot be operated directly. It is only used for calculation and has no specific value.</p><blockquote><p>Note:</p><ol><li>Computed-Properties can be used for classes, structures, and enumerations, while Stored-Properties can only be used for classes and structures.    </li><li>The Stored-Properties can be defined with the keyword ‘var’ or the keyword let’. The Computed-Property can only be defined with the keyword ‘var’.   </li><li>Computed-Properties do not directly store values, but provide a getter and an optional setter to indirectly obtain and set the values of other properties or variables.</li></ol></blockquote><h2 id="Reference-Documents"><a href="#Reference-Documents" class="headerlink" title="Reference Documents"></a><strong><font color=gray size=3 ><em>Reference Documents</em></font></strong></h2><p><a href="https://cloud.tencent.com/developer/article/1610855">https://cloud.tencent.com/developer/article/1610855</a>  </p>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00.Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computed </tag>
            
            <tag> Stored </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04. Set Read-only permission of the property</title>
      <link href="/2023/02/28/Swift/00.%20Tips/04.%20Set%20Read-only%20permission%20of%20the%20property/"/>
      <url>/2023/02/28/Swift/00.%20Tips/04.%20Set%20Read-only%20permission%20of%20the%20property/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p>In Swift, there is no keyword “readonly” like Objective-C to set read-only access permissions. How can Swift implement read-only access permissions? We can do this as follows:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">private(set)</span> <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>External access is normal:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = ClassA()</span><br><span class="line">print(a.title)</span><br></pre></td></tr></table></figure><p>But the following is wrong:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.title = &quot;1234&quot;</span><br></pre></td></tr></table></figure><p>The following errors will be reported:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot assign to property: &#x27;title&#x27; setter is inaccessible</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00.Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Read-only </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03. NSString and String</title>
      <link href="/2023/02/28/Swift/00.%20Tips/03.%20NSString%20and%20String/"/>
      <url>/2023/02/28/Swift/00.%20Tips/03.%20NSString%20and%20String/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><h2 id="1-Mutual-Transformation"><a href="#1-Mutual-Transformation" class="headerlink" title="1. Mutual Transformation"></a><strong><font size=3 >1. Mutual Transformation</font></strong></h2><p>NSString and String can transform to each other.<br><strong> Example Code </strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">StringToNSString</span>()  &#123;</span><br><span class="line">    <span class="keyword">let</span> a <span class="operator">=</span> <span class="type">String</span>(<span class="string">&quot;1234567890&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> b <span class="operator">=</span> a <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line">    <span class="built_in">print</span>(b.integerValue)</span><br><span class="line">    <span class="built_in">print</span>(b.length)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">NSStringToString</span>()  &#123;</span><br><span class="line">    <span class="keyword">let</span> a : <span class="type">NSString</span> <span class="operator">=</span> <span class="string">&quot;1234567890&quot;</span></span><br><span class="line">    <span class="keyword">let</span> b <span class="operator">=</span> a <span class="keyword">as</span> <span class="type">String</span></span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Differences-between-NSString-and-String"><a href="#2-Differences-between-NSString-and-String" class="headerlink" title="2. Differences between NSString and String"></a><strong><font size=3 >2. Differences between NSString and String</font></strong></h2><p>NSString is a subclass of NSObject and that is to say, it is a class that is a reference type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">NSString</span> : <span class="title class_">NSObject</span>, <span class="title class_">NSCopying</span>, <span class="title class_">NSMutableCopying</span>, <span class="title class_">NSSecureCoding</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> length: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>However, String is a value type which is a kind of struct.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@frozen</span> <span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">String</span> &#123;  </span><br><span class="line">    <span class="keyword">@inlinable</span> <span class="keyword">public</span> <span class="keyword">init</span>()</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>They have some identical APIs, but they also have their own independent APIs.  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="type">String</span>()</span><br><span class="line">str <span class="operator">=</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>();</span><br><span class="line">nsStr <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>1.1 Similar or Identical APIs</strong></p><details><summary>Sample Code</summary><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. Get the number of characters in the string</span></span><br><span class="line"><span class="built_in">print</span>(str.count);   <span class="comment">//6</span></span><br><span class="line"><span class="built_in">print</span>(nsStr.length);   <span class="comment">//6</span></span><br><span class="line"><span class="comment">//2. Prefix/Suffix Operations</span></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">str.hasPrefix(<span class="string">&quot;12&quot;</span>) <span class="comment">//true</span></span><br><span class="line">str.hasSuffix(<span class="string">&quot;56&quot;</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">nsStr.hasPrefix(<span class="string">&quot;12&quot;</span>)   <span class="comment">//true</span></span><br><span class="line">nsStr.hasSuffix(<span class="string">&quot;56&quot;</span>)   <span class="comment">//true</span></span><br><span class="line"><span class="comment">//3. Prefix/Suffix Operations</span></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;123456-11&quot;</span>;</span><br><span class="line">str.components(separatedBy: <span class="string">&quot;-&quot;</span>);   <span class="comment">//[&quot;123456&quot;, &quot;11&quot;]</span></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;123456-22&quot;</span>);</span><br><span class="line">nsStr.components(separatedBy: <span class="string">&quot;-&quot;</span>); <span class="comment">//[&quot;123456&quot;, &quot;22&quot;]</span></span><br><span class="line"><span class="comment">//4. Letter case conversion ops for uppercased/lowercased/capitalized</span></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(str.uppercased());    <span class="comment">//ABC</span></span><br><span class="line"><span class="built_in">print</span>(str.lowercased());    <span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;cba&quot;</span>);</span><br><span class="line"><span class="built_in">print</span>(nsStr.uppercased);    <span class="comment">//CBA</span></span><br><span class="line"><span class="built_in">print</span>(nsStr.lowercased);    <span class="comment">//cba</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(str.capitalized);    <span class="comment">//Abc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;cba&quot;</span>);</span><br><span class="line"><span class="built_in">print</span>(nsStr.capitalized);    <span class="comment">//Cba</span></span><br><span class="line"><span class="comment">//5. Strip specific strings ops for trimmingCharacters</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;<span class="subst">\r</span> abc &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> strTrimed <span class="operator">=</span> str.trimmingCharacters(in: .whitespacesAndNewlines)</span><br><span class="line"><span class="built_in">print</span>(strTrimed);   <span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;<span class="subst">\r</span> cba &quot;</span>);</span><br><span class="line"><span class="keyword">let</span> nsStrTrimed <span class="operator">=</span> nsStr.trimmingCharacters(in: .whitespacesAndNewlines);</span><br><span class="line"><span class="built_in">print</span>(nsStrTrimed); <span class="comment">//cba</span></span><br><span class="line"><span class="comment">//6. Character substitution ops for replacingOccurrences:of:with</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;hello String&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str1 <span class="operator">=</span> str.replacingOccurrences(of: <span class="string">&quot;String&quot;</span>, with: <span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str1) <span class="comment">//&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral:<span class="string">&quot;hello NSString&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> nsStr1 <span class="operator">=</span> nsStr.replacingOccurrences(of: <span class="string">&quot;NSString&quot;</span>, with: <span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(nsStr1)   <span class="comment">//&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7. Convert decimal hexadecimal octal data to string</span></span><br><span class="line"><span class="keyword">let</span> hexStr <span class="operator">=</span> <span class="type">String</span>().appendingFormat(<span class="string">&quot;%x&quot;</span>,<span class="number">16</span>)<span class="comment">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class="line"><span class="keyword">let</span> oStr <span class="operator">=</span> <span class="type">String</span>().appendingFormat(<span class="string">&quot;%o&quot;</span>,<span class="number">16</span>)<span class="comment">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class="line"><span class="keyword">let</span> dStr <span class="operator">=</span> <span class="type">String</span>().appendingFormat(<span class="string">&quot;%d&quot;</span>,<span class="number">0x10</span>)<span class="comment">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class="line"><span class="keyword">let</span> dStr1 <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%d&quot;</span>, <span class="number">0o10</span>)<span class="comment">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hexNSStr <span class="operator">=</span> <span class="type">NSString</span>().appendingFormat(<span class="string">&quot;%x&quot;</span>, <span class="number">16</span>)<span class="comment">//10-&gt;16，result:&quot;10&quot;</span></span><br><span class="line"><span class="keyword">let</span> oNSStr <span class="operator">=</span> <span class="type">NSString</span>().appendingFormat(<span class="string">&quot;%o&quot;</span>,<span class="number">16</span>)<span class="comment">//10-&gt;8，result:&quot;20&quot;</span></span><br><span class="line"><span class="keyword">let</span> dNSStr <span class="operator">=</span> <span class="type">NSString</span>().appendingFormat(<span class="string">&quot;%d&quot;</span>,<span class="number">0x10</span>)<span class="comment">//16-&gt;10，result:&quot;16&quot;</span></span><br><span class="line"><span class="keyword">let</span> dNSStr1 <span class="operator">=</span> <span class="type">NSString</span>(format: <span class="string">&quot;%d&quot;</span>, <span class="number">0o10</span>)<span class="comment">//8-&gt;10，result: &quot;8&quot;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure></details><p><strong>1.2 Independent APIs</strong><br>1.2.1 Independent APIs of String    </p><details><summary>Sample Code</summary><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. isEmpty</span></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="type">String</span>();</span><br><span class="line">str <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(str.isEmpty);</span><br><span class="line"><span class="comment">//2. sorted()</span></span><br><span class="line"><span class="keyword">var</span> str <span class="operator">=</span> <span class="string">&quot;215423&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(str.sorted()); <span class="comment">//[&quot;1&quot;, &quot;2&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. filter()</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;12 34 56&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> filter <span class="operator">=</span> str.filter &#123; (char) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    char <span class="operator">!=</span> <span class="string">&quot; &quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">print</span>(filter);<span class="comment">//123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. enumerated()</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> str.enumerated() &#123;</span><br><span class="line">    <span class="built_in">print</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>1.2.2 Independent APIs of NSString</p><details><summary>Sample Code</summary><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. initialize methods</span></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>.<span class="keyword">init</span>(string: <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. boolValue</span></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="built_in">print</span>(nsStr.boolValue);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. isEqual()</span></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="built_in">print</span>(nsStr.isEqual(to: <span class="string">&quot;123456&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Numeric Ops</span></span><br><span class="line"><span class="keyword">var</span> nsStr <span class="operator">=</span> <span class="type">NSString</span>(stringLiteral: <span class="string">&quot;123456&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(nsStr.intValue);</span><br><span class="line"><span class="built_in">print</span>(nsStr.floatValue);</span><br><span class="line"><span class="built_in">print</span>(nsStr.doubleValue);</span><br></pre></td></tr></table></figure></details>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00.Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NSString </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02. Lazy loading and Anonymous function</title>
      <link href="/2023/02/28/Swift/00.%20Tips/02.%20Lazy%20loading%20and%20Anonymous%20function/"/>
      <url>/2023/02/28/Swift/00.%20Tips/02.%20Lazy%20loading%20and%20Anonymous%20function/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 1 minutes to finish reading this article.</em></font></p><p>In Swift, we use the lazy keyword before the property to simply implement delayed loading, for example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lazy</span> <span class="keyword">var</span> str: <span class="type">String</span> <span class="operator">=</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Only access the output for the first time&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>This style of writing is similar to closure, but it is actually an kind of anonymous function. We can use anonymous functions to initilize data. As shown below, it is an anoymous function creation call operation:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">//anonymous function code</span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>We can try to print the type of this type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">TestCase</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a: () <span class="operator">=</span> &#123;&#125;()</span><br><span class="line">    <span class="keyword">let</span> b <span class="operator">=</span> test</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(of: a))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(of: b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result is:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">()</span><br><span class="line">() -&gt; ()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00.Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lazy </tag>
            
            <tag> Anonymous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01. Handling of errors and exceptions</title>
      <link href="/2023/02/28/Swift/00.%20Tips/01.%20Handling%20of%20errors%20and%20exceptions/"/>
      <url>/2023/02/28/Swift/00.%20Tips/01.%20Handling%20of%20errors%20and%20exceptions/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><h2 id="1-Handlings-of-Objective-C"><a href="#1-Handlings-of-Objective-C" class="headerlink" title="1. Handlings of Objective-C "></a><strong><font size=3 >1. Handlings of Objective-C </font></strong></h2><p>In Objective-C, we often write code like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSError</span> <span class="operator">*</span>error;</span><br><span class="line"><span class="type">BOOL</span> success <span class="operator">=</span> [data writeToFile: path options: options error: <span class="operator">&amp;</span>error];</span><br><span class="line"><span class="keyword">if</span>(error) &#123;</span><br><span class="line"><span class="comment">// something happens</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That is a very good method to handle possible errors. However we often simply this code like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[data writeToFile: path options: options error: <span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>We set varaible error to nil, Maybe we don’t care about this error when we are developing. However this method can report errors. For example, if the space of the device’s disk is full, you will write unsuccessfully, and this error can’t not be found easily becase of our laziness.</p><h2 id="2-Handlings-of-Swift"><a href="#2-Handlings-of-Swift" class="headerlink" title="2. Handlings of Swift"></a><strong><font size=3 >2. Handlings of Swift</font></strong></h2><p>In Swift, we don’t need to write an pointer variable error that waiting to be written by called method. we can use ‘try catch’ to take place of it. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> d.write(toFile: <span class="string">&quot;Hello&quot;</span>, options: [])</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</span><br><span class="line">    print (<span class="string">&quot;Error: <span class="subst">\(error.domain)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is a very common to use ‘try catch’ to hand errors and exceptions in Swift. The sample code is as follows.</p><pre><code class="Swift">enum LoginError: Error &#123;    case UserNotFound, UserPasswordNotMatch&#125;func login(user: String, password: String) throws &#123;    if !users.keys.contains(user) &#123;        throw LoginError.UserNotFound    &#125;    if users[user] != password &#123;        throw LoginError.UserPasswordNotMatch    &#125;    print(&quot;Login successfully.&quot;)&#125;// calllet users:[String:String] = [&quot;liudehua&quot;:&quot;One&quot;, &quot;wanggang&quot;:&quot;Two&quot;, &quot;liming&quot;:&quot;Three&quot;]do &#123;    try login(user: &quot;ll&quot;, password: &quot;234&quot;)&#125; catch LoginError.UserNotFound &#123;    print(&quot;UserNotFound&quot;)&#125; catch LoginError.UserPasswordNotMatch &#123;    print(&quot;UserPasswordNotMatch&quot;)&#125; catch &#123;    //default handling, don&#39;t delete it, or it would report an error.&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00.Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> errors </tag>
            
            <tag> exceptions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00. Generation of random numbers</title>
      <link href="/2023/02/28/Swift/00.%20Tips/00.%20Generation%20of%20random%20numbers/"/>
      <url>/2023/02/28/Swift/00.%20Tips/00.%20Generation%20of%20random%20numbers/</url>
      
        <content type="html"><![CDATA[<p><font color=gray size=2><em>It will take about 3 minutes to finish reading this article.</em></font></p><p>In Swift, we can still use the ** arc4random ** method to obtain random numbers. However, it should be noted that:</p><blockquote><p>Arc4random() uses the key stream generator encrypted by Arc4 password to generate a random number in the interval [0, 2 ^ 32). The return type of this function is always UInt32.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> faceCount <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">let</span> randomResult <span class="operator">=</span> <span class="type">Int</span>(arc4random()) <span class="operator">%</span> faceCount <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(randomResult)</span><br></pre></td></tr></table></figure><p>The above code is not a problem on 64 bit machines, but there is a risk of crash if you may encounter iPhone 5 and its previous devices. In this case, it is relatively safe to use an improved version:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">arc4random_uniform</span>(<span class="keyword">_</span>: <span class="type">UInt32</span>) -&gt; <span class="type">UInt32</span></span><br></pre></td></tr></table></figure><p>It accepts a UInt32 type number as input, and reduces the result to 0 to n-1.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> faceCount: <span class="type">UInt32</span> <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">let</span> randomResult <span class="operator">=</span> <span class="type">Int</span>(arc4random_uniform(faceCount)) <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(randomResult)</span><br></pre></td></tr></table></figure><p>The following is a best practice based on Range:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">random</span>(<span class="params">in</span> <span class="params">range</span>: <span class="type">Range</span>&lt;<span class="type">Int</span>&gt;) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count <span class="operator">=</span> <span class="type">UInt32</span>(range.endIndex <span class="operator">-</span> range.startIndex)</span><br><span class="line">    <span class="keyword">return</span>  <span class="type">Int</span>(arc4random_uniform(count)) <span class="operator">+</span> range.startIndex</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">...</span><span class="number">100</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> range <span class="operator">=</span> <span class="type">Range</span>&lt;<span class="type">Int</span>&gt;(<span class="number">1</span><span class="operator">...</span><span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(random(in: range))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
          <category> 00.Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> random </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
